<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codeforces-Solutions</title>
      <link href="/2020/01/16/codeforces-solutions/"/>
      <url>/2020/01/16/codeforces-solutions/</url>
      
        <content type="html"><![CDATA[<h2 id="Educational-Codeforces-Round-80"><a href="#Educational-Codeforces-Round-80" class="headerlink" title="Educational Codeforces Round 80"></a>Educational Codeforces Round 80</h2><h3 id="C-Two-Arrays（组合数学、动态规划）"><a href="#C-Two-Arrays（组合数学、动态规划）" class="headerlink" title="C - Two Arrays（组合数学、动态规划）"></a><a href="https://codeforces.com/contest/1288/problem/C" target="_blank" rel="noopener">C - Two Arrays</a>（组合数学、动态规划）</h3><p>题意：给定n，m，利用1~n之间的数（可重复）来组成长度为m的数组a,b，要求数组a非递减,数组b非递增，且a数组的数小于等于b数组中对应位置的数，求出a,b数组对数</p><p>思路1：官方题解，$a_1\le a_m \le b_m$故可看成可放回的随机抽取$2m$个数（<a href="https://sites.math.northwestern.edu/~mlerma/courses/cs310-05s/notes/dm-gcomb" target="_blank" rel="noopener">Combinations with Repetition</a>），进行排序，故答案为${n+2m-1 \choose 2m} = \frac{(n + 2m - 1)!}{(2m)! (n-1)!}$</p><p>思路2：$dp[i][j]$表示第$i$个位置（长度）放置数字$j$（末位数字）的方案数，序列为非递减序列（相等或增加），故状态转移方程为$dp[i][j]=dp[i-1][j]+dp[i][j-1]$（左边：$j-1$变为$j$新增的方案，右边：$j-1$原有的方案），初始条件$dp[1][x]=1$</p><p>代码2：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a, b) memset(a,b,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(i, a, b) for(int i=a;i&lt;b;i++)</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2333</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ONLINE_JUDGE</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("out.txt","w",stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">mem</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCPC 2019 Final 题解</title>
      <link href="/2019/12/17/ccpc-2019-final-ti-jie/"/>
      <url>/2019/12/17/ccpc-2019-final-ti-jie/</url>
      
        <content type="html"><![CDATA[<p>题目来源：CCPC 2019</p><p>题目链接：<a href="http://codeforces.com/gym/102431/attachments/download/9860/statements.pdf" target="_blank" rel="noopener">CodeForces-Gym-102431</a></p><p>退役两年半了还是这么蔡真是抱歉。。。</p><h2 id="A-Kick-Start（水、模拟）"><a href="#A-Kick-Start（水、模拟）" class="headerlink" title="A.Kick Start（水、模拟）"></a>A.Kick Start（水、模拟）</h2><p>题解：签到题，模拟，如果注意不到11th不是11st容易怒WA</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(i,a,b) for(int i=a;i&lt;b;i++)</span>string monthsStr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"Jan"</span><span class="token punctuation">,</span>        <span class="token string">"Feb"</span><span class="token punctuation">,</span>        <span class="token string">"Mar"</span><span class="token punctuation">,</span>        <span class="token string">"Apr"</span><span class="token punctuation">,</span>        <span class="token string">"May"</span><span class="token punctuation">,</span>        <span class="token string">"Jun"</span><span class="token punctuation">,</span>        <span class="token string">"Jul"</span><span class="token punctuation">,</span>        <span class="token string">"Aug"</span><span class="token punctuation">,</span>        <span class="token string">"Sept"</span><span class="token punctuation">,</span>        <span class="token string">"Oct"</span><span class="token punctuation">,</span>        <span class="token string">"Nov"</span><span class="token punctuation">,</span>        <span class="token string">"Dec"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1st 2nd 3rd ... 11th 12th 13th ... 21st 22nd 23rd ... 31st</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> months<span class="token punctuation">;</span><span class="token keyword">struct</span> Date<span class="token punctuation">{</span>    string month<span class="token punctuation">,</span>date<span class="token punctuation">;</span>    pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> realDate<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">>></span>month<span class="token operator">>></span>date<span class="token punctuation">;</span>        realDate<span class="token operator">=</span><span class="token function">make_pair</span><span class="token punctuation">(</span>months<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">stoi</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>date<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">toStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> month<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>date<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> realDate<span class="token operator">&lt;</span>rhs<span class="token punctuation">.</span>realDate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ONLINE_JUDGE</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("out.txt","w",stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">12</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> months<span class="token punctuation">[</span>monthsStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cs<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span><span class="token operator">++</span>cs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>Date<span class="token operator">></span> dates<span class="token punctuation">;</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Date date<span class="token punctuation">;</span>            date<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dates<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Date lst<span class="token operator">=</span>dates<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dates<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>dates<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dates<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lst<span class="token operator">&lt;</span>dates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ret<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: "</span><span class="token punctuation">,</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"See you next year"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span>dates<span class="token punctuation">[</span>ret<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="E-Non-Maximum-Suppression"><a href="#E-Non-Maximum-Suppression" class="headerlink" title="E. Non-Maximum Suppression"></a>E. Non-Maximum Suppression</h2><p>题意：模拟非极大值抑制NMS，按IoU threshold去除重复的检测框。</p><p>题解：有生之年还能在算法比赛中见到CV的题，不愧是旷视！关于NMS的解释可以看<a href="https://www.cnblogs.com/makefile/p/nms.html" target="_blank" rel="noopener">这里</a></p><p>先来一发Test 5会超时的代码，注意如果没有满足题设<code>strictly larger</code>的条件，即加上<code>1e-10</code>的判断，会先在Test 4 WA：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(i,a,b) for(int i=a;i&lt;b;i++)</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> width<span class="token punctuation">;</span><span class="token keyword">double</span> th<span class="token punctuation">;</span><span class="token keyword">struct</span> Box<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//bottom-left coord</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">toStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>y<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>score<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Box boxes<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idxs<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> totalAera<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> boxes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">></span>boxes<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">const</span> Box<span class="token operator">&amp;</span> l<span class="token punctuation">,</span><span class="token keyword">const</span> Box <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ix<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>x<span class="token operator">-</span>r<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> iy<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>y<span class="token operator">-</span>r<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ia<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>ix<span class="token operator">*</span>iy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//IOU>th,if overlap IOU=1</span>    <span class="token comment" spellcheck="true">//there may be precision tricks</span>    <span class="token keyword">return</span> ia<span class="token operator">-</span>th<span class="token operator">*</span><span class="token punctuation">(</span>totalAera<span class="token operator">-</span>ia<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1e-10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ONLINE_JUDGE</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("out.txt","w",stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cs<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span><span class="token operator">++</span>cs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>width<span class="token punctuation">,</span><span class="token operator">&amp;</span>th<span class="token punctuation">)</span><span class="token punctuation">;</span>        totalAera<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>width<span class="token operator">*</span>width<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//there are different boxes with same score</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>idxs<span class="token punctuation">,</span>idxs<span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//for(int i=0;i&lt;n;i++) boxes[idxs[i]].toStr();</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> inqueueIndex<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> inqueueIndex<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>inqueueIndex<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> tp<span class="token operator">=</span>inqueueIndex<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            inqueueIndex<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt<span class="token operator">=</span>inqueueIndex<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">--</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> cur<span class="token operator">=</span>inqueueIndex<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                inqueueIndex<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">intersect</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">,</span>boxes<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    inqueueIndex<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: %d\n"</span><span class="token punctuation">,</span>cs<span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span>ans<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化策略：由于所有的BoundingBox的大小都是固定的，因此每次选择Box时，不需要和所有的Box进行IOU的计算，只需要计算当前Box周围的一圈（中心的最大L1距离为两个边长）即可，代码如下（耗时2.6s左右）：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(i,a,b) for(int i=a;i&lt;b;i++)</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> width<span class="token punctuation">;</span><span class="token keyword">double</span> th<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Box<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//bottom-left coord</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">toStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>y<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>score<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Box boxes<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idxs<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> totalAera<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> gridMap<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> boxes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">></span>boxes<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">const</span> Box<span class="token operator">&amp;</span> l<span class="token punctuation">,</span><span class="token keyword">const</span> Box <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ix<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>x<span class="token operator">-</span>r<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> iy<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>y<span class="token operator">-</span>r<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ia<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>ix<span class="token operator">*</span>iy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//IOU>th,if overlap IOU=1</span>    <span class="token comment" spellcheck="true">//there may be precision tricks</span>    <span class="token keyword">return</span> ia<span class="token operator">-</span>th<span class="token operator">*</span><span class="token punctuation">(</span>totalAera<span class="token operator">-</span>ia<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1e-10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getGrid</span><span class="token punctuation">(</span><span class="token keyword">const</span> Box<span class="token operator">&amp;</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>x<span class="token operator">/</span>width<span class="token punctuation">,</span>cur<span class="token punctuation">.</span>y<span class="token operator">/</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">suppress</span><span class="token punctuation">(</span><span class="token keyword">const</span> Box<span class="token operator">&amp;</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> grid<span class="token operator">=</span><span class="token function">getGrid</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">auto</span> nextGrid<span class="token operator">=</span><span class="token function">make_pair</span><span class="token punctuation">(</span>grid<span class="token punctuation">.</span>first<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>grid<span class="token punctuation">.</span>second<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it<span class="token operator">=</span>gridMap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>nextGrid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>gridMap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intersect</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>boxes<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ONLINE_JUDGE</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("out.txt","w",stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cs<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span><span class="token operator">++</span>cs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>width<span class="token punctuation">,</span><span class="token operator">&amp;</span>th<span class="token punctuation">)</span><span class="token punctuation">;</span>        totalAera<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>width<span class="token operator">*</span>width<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//there are different boxes with same score</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>idxs<span class="token punctuation">,</span>idxs<span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//for(int i=0;i&lt;n;i++) boxes[idxs[i]].toStr();</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        gridMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> idx<span class="token operator">=</span>idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> grid<span class="token operator">=</span><span class="token function">getGrid</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>gridMap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token operator">==</span>gridMap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                gridMap<span class="token punctuation">[</span>grid<span class="token punctuation">]</span><span class="token operator">=</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            gridMap<span class="token punctuation">[</span>grid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> idx<span class="token operator">=</span>idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">suppress</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: %d\n"</span><span class="token punctuation">,</span>cs<span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span>ans<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进一步优化策略（耗时约1.6s）：</p><ul><li><p>Grid坐标使用一个下标即可，如$coord=x/m*2e7+y/m$，在数据范围内不会重复</p></li><li><p>使用例如哈希表等结构代替map</p></li><li><p>删除已经被Suppress的下标</p></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(i,a,b) for(int i=a;i&lt;b;i++)</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ext/pb_ds/assoc_container.hpp></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ext/pb_ds/hash_policy.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_pbds<span class="token punctuation">;</span><span class="token keyword">int</span> width<span class="token punctuation">;</span><span class="token keyword">double</span> th<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Box<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//bottom-left coord</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">toStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>y<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>score<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Box boxes<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idxs<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> totalAera<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>gp_hash_table<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> gridMap<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> boxes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">></span>boxes<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">const</span> Box<span class="token operator">&amp;</span> l<span class="token punctuation">,</span><span class="token keyword">const</span> Box <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ix<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>x<span class="token operator">-</span>r<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> iy<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>y<span class="token operator">-</span>r<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ia<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>ix<span class="token operator">*</span>iy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//IOU>th,if overlap IOU=1</span>    <span class="token comment" spellcheck="true">//there may be precision tricks</span>    <span class="token keyword">return</span> ia<span class="token operator">-</span>th<span class="token operator">*</span><span class="token punctuation">(</span>totalAera<span class="token operator">-</span>ia<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1e-10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">getGrid</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">/</span>width<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token number">2e7</span><span class="token punctuation">)</span><span class="token operator">+</span>y<span class="token operator">/</span>width<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">suppress</span><span class="token punctuation">(</span><span class="token keyword">const</span> Box<span class="token operator">&amp;</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ll nextGrid<span class="token operator">=</span><span class="token function">getGrid</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>width<span class="token punctuation">,</span>cur<span class="token punctuation">.</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it<span class="token operator">=</span>gridMap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>nextGrid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>gridMap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it2<span class="token operator">=</span>it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it2<span class="token operator">!=</span>it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token operator">*</span>it2<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intersect</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>boxes<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it2<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> it2<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ONLINE_JUDGE</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("out.txt","w",stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cs<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span><span class="token operator">++</span>cs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>width<span class="token punctuation">,</span><span class="token operator">&amp;</span>th<span class="token punctuation">)</span><span class="token punctuation">;</span>        totalAera<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">*</span>width<span class="token operator">*</span>width<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//there are different boxes with same score</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>idxs<span class="token punctuation">,</span>idxs<span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//for(int i=0;i&lt;n;i++) boxes[idxs[i]].toStr();</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        gridMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> idx<span class="token operator">=</span>idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            ll grid<span class="token operator">=</span><span class="token function">getGrid</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>boxes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>gridMap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token operator">==</span>gridMap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                gridMap<span class="token punctuation">[</span>grid<span class="token punctuation">]</span><span class="token operator">=</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            gridMap<span class="token punctuation">[</span>grid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> idx<span class="token operator">=</span>idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">suppress</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: %d\n"</span><span class="token punctuation">,</span>cs<span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span>ans<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="K-Russian-Dolls-on-the-Christmas-Tree-（DSU-on-tree）"><a href="#K-Russian-Dolls-on-the-Christmas-Tree-（DSU-on-tree）" class="headerlink" title="K. Russian Dolls on the Christmas Tree （DSU on tree）"></a>K. Russian Dolls on the Christmas Tree （DSU on tree）</h2><p>题意：统计所有子树包含数字集合的非连续段数，如${2,3,5,6,98}$一共包括三段。</p><p>题解：差不多是DSU的模板题吧（题意很迷啊），虽然作者已经不太会写了。</p><p>DSU on tree又叫树上启发式合并，是一种<strong>无修改</strong>子树特征查询方法，基于树链剖分的轻重链思想（连接子树且子树节点最多的边为重边）</p><p>一些名词：<a href="https://oi-wiki.org/graph/dsu-on-tree/" target="_blank" rel="noopener">树上启发式合并</a>，<a href="https://oi-wiki.org/graph/hld/" target="_blank" rel="noopener">树链剖分</a>，<a href="https://blog.csdn.net/Yaokai_AssultMaster/article/details/79599809" target="_blank" rel="noopener">线段树</a></p><p><a href="https://www.cnblogs.com/zwfymqz/p/9683124.html" target="_blank" rel="noopener">DSU on tree的解析和例题</a></p><p>这里说的启发式，其实就是指<strong>把小集合往大集合上合并</strong>，具体流程如下，对于某一个节点：</p><ul><li>递归轻儿子并消除影响（轻儿子所在子树答案确定)</li><li>递归重儿子，不消除影响（重儿子所在子树答案确定)</li><li>再次统计轻儿子对答案的影响</li><li>更新节点答案</li><li>若当前节点是轻儿子，删除影响</li></ul><p>总体而言，遍历了两次非重子树，一次重子树，之所以要删除中间的结果，是因为没有这么多空间存。显然若一个节点被遍历了$x$次，则其重儿子会被遍历$x$次，轻儿子（如果有的话）会被遍历$2x$次。</p><p><img src="fig_dsu_on_tree.png" alt></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a, b) memset(a,b,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(i, a, b) for(int i=a;i&lt;b;i++)</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">u</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">v</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//num of node</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//num of edge</span>vector<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//edge list graph</span><span class="token keyword">int</span> siz<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子树节点数</span><span class="token keyword">int</span> dep<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//深度</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//父节点</span><span class="token keyword">int</span> son<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重儿子</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    edges<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mem</span><span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    edges<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//找到重边(son[u])，确定深度，子树大小，父节点</span><span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> pa<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> depth<span class="token punctuation">;</span>    fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> pa<span class="token punctuation">;</span>    siz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Edge <span class="token operator">&amp;</span>e <span class="token operator">=</span> edges<span class="token punctuation">[</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> pa<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            siz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> siz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> siz<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> siz<span class="token punctuation">[</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                son<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> flag<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重儿子标签，影响不会被消除，实际上全程只有一个节点会被打上标签</span><span class="token keyword">void</span> <span class="token function">updateAns</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> pa<span class="token punctuation">,</span><span class="token keyword">bool</span> flg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span>flag<span class="token punctuation">[</span>u<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>flag<span class="token punctuation">[</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flg<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//insert</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> cnt<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//remove</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cnt<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    flag<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>flg<span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Edge <span class="token operator">&amp;</span>e <span class="token operator">=</span> edges<span class="token punctuation">[</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> pa <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">updateAns</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> flg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> pa<span class="token punctuation">,</span> <span class="token keyword">bool</span> keep<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Edge <span class="token operator">&amp;</span>e <span class="token operator">=</span> edges<span class="token punctuation">[</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> pa <span class="token operator">&amp;&amp;</span> v <span class="token operator">!=</span> son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//统计轻儿子，消除影响</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs2</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//统计重儿子，统计答案前不消除影响</span>    <span class="token punctuation">}</span>    <span class="token function">updateAns</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>pa<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> vis<span class="token punctuation">[</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//统计完以后重儿子已经木有用了</span>    ans<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    printf("u:%d ans:%d\n",u,cnt);</span><span class="token comment" spellcheck="true">//    rep(i,1,n+1){</span><span class="token comment" spellcheck="true">//        printf("%d-%d ",i,flag[i]);</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    puts("");</span>    <span class="token comment" spellcheck="true">//若当前节点是轻儿子，删除影响</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>keep<span class="token punctuation">)</span>        <span class="token function">updateAns</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>pa<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ONLINE_JUDGE</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("out.txt","w",stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cs <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> cs <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>cs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addEdge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addEdge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mem</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mem</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d:"</span><span class="token punctuation">,</span> cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="I-Mr-Panda-and-Blocks-（构造）"><a href="#I-Mr-Panda-and-Blocks-（构造）" class="headerlink" title="I. Mr. Panda and Blocks （构造）"></a>I. Mr. Panda and Blocks （构造）</h2><p>题意：有$n$种颜色，颜色两两组合最终形成$\frac{n(n+1)}{2}$个由两个正方体组合成的长方体，现在进行搭积木操作，要将同色长方体连起来，且每个颜色要和其他颜色也相邻</p><p>题解：这种通过构造可解而不是根据任何所谓结论去暴力搜索的题目其实很有趣，又很无聊（想不到就gg了）。还好作者玩过积木。</p><p>可以看到随着$n$的增加，积木的数量也是逐渐增多的（二阶等差，每次增加$1,2,3,…$）。我们要尽可能的让一个颜色连接起来，又要和其他颜色去相连，那么最直观的做法就是把由其他颜色带来的组合放在上一层。这样子每个颜色要和其他颜色相邻的要求本来就达到了，放在上一层则能保证和之前的颜色也相邻，具体请看图。顺带吐槽一下这个样例的误导性真是太强了，一点都没有规律可言。</p><p>本题可能有其他解法，不过智障作者没有想到：</p><p><img src="fig_i.jpg" alt></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(i,a,b) for(int i=a;i&lt;b;i++)</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ONLINE_JUDGE</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("out.txt","w",stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cs<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span><span class="token operator">++</span>cs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d:\n"</span><span class="token punctuation">,</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//layer and second col of block</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// first col of block</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d %d %d %d %d\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="J-Wire-compatible-Protocol-buffer-（模拟）"><a href="#J-Wire-compatible-Protocol-buffer-（模拟）" class="headerlink" title="J.Wire-compatible Protocol buffer （模拟）"></a>J.Wire-compatible Protocol buffer （模拟）</h2><p>题意：判断两个Protobuf descriptor是不是本质上相同的</p><p>题解：出题人你出一个6页的模拟题来防AK良心不会痛吗？？？</p><p>虽然概念写了很多，但是具体的比较过程还是比较容易的，需要注意的是有些消息类别是互相包含的，在验证是否相同时若要判别对象列表成环则可认为整条链上的结果都相同（没有验证过这个想法，可能数据偏水）。</p><p><img src="fig_j.jpg" alt></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a, b) memset(a,b,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(i, a, b) for(int i=a;i&lt;b;i++)</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">enum</span> FiledLabel<span class="token punctuation">{</span>    REQUIRED<span class="token punctuation">,</span>OPTIONAL<span class="token punctuation">,</span>REPEATED<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">enum</span> FiledType<span class="token punctuation">{</span>    DOUBLE<span class="token punctuation">,</span>STRING<span class="token punctuation">,</span>EMBEDDED_MESSAGE<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Filed<span class="token punctuation">{</span>    FiledLabel filedLabel<span class="token punctuation">;</span>    FiledType filedType<span class="token punctuation">;</span>    <span class="token keyword">int</span> filedMessageID<span class="token punctuation">;</span>    string filedMessageName<span class="token punctuation">;</span>    string filedName<span class="token punctuation">;</span>    <span class="token keyword">int</span> filedNumber<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Filed<span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> filedNumber<span class="token operator">&lt;</span>rhs<span class="token punctuation">.</span>filedNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Message<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Filed<span class="token operator">></span> fileds<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Filed <span class="token function">parseFiled</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//cout&lt;&lt;"\t Parsing Filed ["&lt;&lt;str&lt;&lt;"]"&lt;&lt;endl;</span>    Filed ret<span class="token punctuation">;</span>    stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    string tmp<span class="token punctuation">;</span>    ss<span class="token operator">>></span>tmp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token string">"optional"</span><span class="token punctuation">)</span> ret<span class="token punctuation">.</span>filedLabel<span class="token operator">=</span>OPTIONAL<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token string">"required"</span><span class="token punctuation">)</span> ret<span class="token punctuation">.</span>filedLabel<span class="token operator">=</span>REQUIRED<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token string">"repeated"</span><span class="token punctuation">)</span> ret<span class="token punctuation">.</span>filedLabel<span class="token operator">=</span>REPEATED<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token operator">>></span>tmp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token string">"string"</span><span class="token punctuation">)</span> ret<span class="token punctuation">.</span>filedType<span class="token operator">=</span>STRING<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token string">"double"</span><span class="token punctuation">)</span> ret<span class="token punctuation">.</span>filedType<span class="token operator">=</span>DOUBLE<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        ret<span class="token punctuation">.</span>filedMessageName<span class="token operator">=</span>tmp<span class="token punctuation">;</span>        ret<span class="token punctuation">.</span>filedType<span class="token operator">=</span>EMBEDDED_MESSAGE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ss<span class="token operator">>></span>ret<span class="token punctuation">.</span>filedName<span class="token operator">>></span>tmp<span class="token operator">>></span>ret<span class="token punctuation">.</span>filedNumber<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">splitFiled</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> rets<span class="token punctuation">;</span>    <span class="token keyword">int</span> curPos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>pos<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">,</span>curPos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>        rets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>curPos<span class="token punctuation">,</span>pos<span class="token operator">-</span>curPos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        curPos<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rets<span class="token punctuation">;</span><span class="token punctuation">}</span>Message <span class="token function">parseMessage</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//cout&lt;&lt;"Parsing Message ["&lt;&lt;str&lt;&lt;"]"&lt;&lt;endl;</span>    Message ret<span class="token punctuation">;</span>    <span class="token keyword">int</span> st<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ed<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> filedStrs<span class="token operator">=</span><span class="token function">splitFiled</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>st<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ed<span class="token operator">-</span>st<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span>filedStrs<span class="token punctuation">)</span><span class="token punctuation">{</span>        ret<span class="token punctuation">.</span>fileds<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">parseFiled</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>fileds<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ret<span class="token punctuation">.</span>fileds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string tmp<span class="token punctuation">;</span>    ss<span class="token operator">>></span>tmp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token string">"message"</span><span class="token punctuation">)</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token operator">>></span>tmp<span class="token punctuation">;</span>    ret<span class="token punctuation">.</span>name<span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">splitMessage</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span><span class="token punctuation">{</span>    string cur<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> rets<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string s<span class="token operator">=</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">auto</span> idx<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">!=</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                cur<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rets<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> sameBaseContent<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> same<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">compareBaseContent</span><span class="token punctuation">(</span>Message <span class="token operator">&amp;</span>a<span class="token punctuation">,</span>Message <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>fileds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>b<span class="token punctuation">.</span>fileds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>fileds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Filed <span class="token operator">&amp;</span>fai<span class="token operator">=</span>a<span class="token punctuation">.</span>fileds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        Filed <span class="token operator">&amp;</span>fbi<span class="token operator">=</span>b<span class="token punctuation">.</span>fileds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fai<span class="token punctuation">.</span>filedNumber<span class="token operator">!=</span>fbi<span class="token punctuation">.</span>filedNumber           <span class="token operator">||</span> fai<span class="token punctuation">.</span>filedLabel<span class="token operator">!=</span>fbi<span class="token punctuation">.</span>filedLabel           <span class="token operator">||</span> fai<span class="token punctuation">.</span>filedType<span class="token operator">!=</span>fbi<span class="token punctuation">.</span>filedType                <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">checkSame</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>Message<span class="token operator">></span><span class="token operator">&amp;</span> messages<span class="token punctuation">,</span>map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>se<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>same<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> same<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//递归陷入循环</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>se<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    se<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> <span class="token operator">&amp;</span>a<span class="token operator">=</span>messages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token operator">=</span>messages<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ret<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span>a<span class="token punctuation">.</span>fileds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">auto</span> <span class="token operator">&amp;</span>fap<span class="token operator">=</span>a<span class="token punctuation">.</span>fileds<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fbp<span class="token operator">=</span>b<span class="token punctuation">.</span>fileds<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sameBaseContent<span class="token punctuation">[</span>fap<span class="token punctuation">.</span>filedMessageID<span class="token punctuation">]</span><span class="token punctuation">[</span>fbp<span class="token punctuation">.</span>filedMessageID<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ret<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> ret<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token function">checkSame</span><span class="token punctuation">(</span>fap<span class="token punctuation">.</span>filedMessageID<span class="token punctuation">,</span>fbp<span class="token punctuation">.</span>filedMessageID<span class="token punctuation">,</span>messages<span class="token punctuation">,</span>se<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//update previous result</span>    same<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>same<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sameBaseContent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>sameBaseContent<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ret<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ONLINE_JUDGE</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("out.txt","w",stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> ma<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>Message<span class="token operator">></span> messages<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> strs<span class="token punctuation">;</span>        <span class="token function">gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            strs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//rep(i,0,n) cout&lt;&lt;"=="&lt;&lt;strs[i]&lt;&lt;"=="&lt;&lt;endl;</span>        strs<span class="token operator">=</span><span class="token function">splitMessage</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s<span class="token operator">:</span>strs<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">auto</span> x<span class="token operator">=</span><span class="token function">parseMessage</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            messages<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>id<span class="token operator">=</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>            ma<span class="token punctuation">[</span>x<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            cout&lt;&lt;"["&lt;&lt;s&lt;&lt;"]\n";</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>message<span class="token operator">:</span>messages<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>filed<span class="token operator">:</span>message<span class="token punctuation">.</span>fileds<span class="token punctuation">)</span><span class="token punctuation">{</span>                filed<span class="token punctuation">.</span>filedMessageID<span class="token operator">=</span>ma<span class="token punctuation">[</span>filed<span class="token punctuation">.</span>filedMessageName<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">mem</span><span class="token punctuation">(</span>sameBaseContent<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sameBaseContent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sameBaseContent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>sameBaseContent<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">compareBaseContent</span><span class="token punctuation">(</span>messages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>messages<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        cout&lt;&lt;"Base:\n";</span><span class="token comment" spellcheck="true">//        for(int i=0;i&lt;cnt;i++){</span><span class="token comment" spellcheck="true">//            rep(j,0,cnt){</span><span class="token comment" spellcheck="true">//                cout&lt;&lt;sameBaseContent[i][j]&lt;&lt;" ";</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            cout&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        cout&lt;&lt;"End"&lt;&lt;endl;</span>        <span class="token function">mem</span><span class="token punctuation">(</span>same<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            same<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sameBaseContent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> se<span class="token punctuation">;</span>                    same<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>same<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">checkSame</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>messages<span class="token punctuation">,</span>se<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        cout&lt;&lt;"Same:\n";</span><span class="token comment" spellcheck="true">//        for(int i=0;i&lt;cnt;i++){</span><span class="token comment" spellcheck="true">//            rep(j,0,cnt){</span><span class="token comment" spellcheck="true">//                cout&lt;&lt;same[i][j]&lt;&lt;" ";</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            cout&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        cout&lt;&lt;"End"&lt;&lt;endl;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        string messageNameA<span class="token punctuation">,</span>messageNameB<span class="token punctuation">;</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            messageNameA<span class="token operator">=</span>buf<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            messageNameB<span class="token operator">=</span>buf<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>same<span class="token punctuation">[</span>ma<span class="token punctuation">[</span>messageNameA<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ma<span class="token punctuation">[</span>messageNameB<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wire-format compatible."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wire-format incompatible."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="L-Spiral-Matrix-（规律）"><a href="#L-Spiral-Matrix-（规律）" class="headerlink" title="L. Spiral Matrix （规律）"></a>L. Spiral Matrix （规律）</h2><p>题意：在矩阵中的任意一点开始，初始朝向可以任选，每次只能直行或者右拐，需要将矩阵中所有点走完且走一次，一共有几种方案</p><p>题解：  一定可以找到恰好一条横线或竖线使得图形仅经过其一次（下图虚线），共有$2(n+m-2)$种方案，注意特判某个边长为1的情况 </p><p>实际上，针对一个可行的方案，轨迹肯定只对一个方向开口，并且，根据轨迹的开口朝向，我们做垂直或者水平的翻转，并交换起终点，就可以得到另外一条对称的轨迹，如下图所示：</p><p><img src="fig_l.jpg" alt></p><p>至于为什么是$m+n-2$,实际上就是去掉最外围数字后，通过各个边的直线数量，这和虚线所表示的位置是一个意思。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(i,a,b) for(int i=a;i&lt;b;i++)</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ONLINE_JUDGE</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//freopen("out.txt","w",stdout);</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cs<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span><span class="token operator">++</span>cs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ret<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> m<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ret<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> ret<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span>m<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: "</span><span class="token punctuation">,</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ret<span class="token operator">%</span>MOD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCPC </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Statistical Learning Methods v2 Notes</title>
      <link href="/2019/12/04/statistical-learning-methods-v2-notes/"/>
      <url>/2019/12/04/statistical-learning-methods-v2-notes/</url>
      
        <content type="html"><![CDATA[<p>《统计学习方法第二版-李航》的笔记非常多，可以参考<a href="https://github.com/SmirkCao/Lihang" target="_blank" rel="noopener">这个</a></p><h3 id="Chap01-统计学习及监督学习概论"><a href="#Chap01-统计学习及监督学习概论" class="headerlink" title="Chap01 统计学习及监督学习概论"></a>Chap01 统计学习及监督学习概论</h3>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学习方法 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ML]-统计学习-1（卡尔曼滤波与粒子滤波）</title>
      <link href="/2019/11/27/ml-tong-ji-xue-xi-1/"/>
      <url>/2019/11/27/ml-tong-ji-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<h3 id="蒙特卡罗方法"><a href="#蒙特卡罗方法" class="headerlink" title="蒙特卡罗方法"></a>蒙特卡罗方法</h3><p>蒙特卡罗（Monte Carlo）方法又称统计模拟方法，是通过从概率模型的随机抽样进行近似数值计算的方法。</p><p>维基上介绍的基本思想如下：</p><blockquote><p>通常蒙特卡罗方法可以粗略地分成两类：一类是所求解的问题本身具有内在的随机性，借助计算机的运算能力可以直接模拟这种随机的过程。例如在核物理研究中，分析中子在反应堆中的传输过程。中子与原子核作用受到量子力学规律的制约，人们只能知道它们相互作用发生的概率，却无法准确获得中子与原子核作用时的位置以及裂变产生的新中子的行进速率和方向。科学家依据其概率进行随机抽样得到裂变位置、速度和方向，这样模拟大量中子的行为后，经过统计就能获得中子传输的范围，作为反应堆设计的依据。</p><p>另一种类型是所求解问题可以转化为某种随机分布的特征数，比如<a href="https://zh.wikipedia.org/wiki/随机事件" target="_blank" rel="noopener">随机事件</a>出现的<a href="https://zh.wikipedia.org/wiki/概率" target="_blank" rel="noopener">概率</a>，或者<a href="https://zh.wikipedia.org/wiki/随机变量" target="_blank" rel="noopener">随机变量</a>的<a href="https://zh.wikipedia.org/wiki/期望值" target="_blank" rel="noopener">期望值</a>。通过随机抽样的方法，以随机事件出现的<a href="https://zh.wikipedia.org/wiki/频率" target="_blank" rel="noopener">频率</a>估计其<a href="https://zh.wikipedia.org/wiki/概率" target="_blank" rel="noopener">概率</a>，或者以<a href="https://zh.wikipedia.org/wiki/抽樣" target="_blank" rel="noopener">抽样</a>的<a href="https://zh.wikipedia.org/w/index.php?title=数字特征&action=edit&redlink=1" target="_blank" rel="noopener">数字特征</a>估算<a href="https://zh.wikipedia.org/wiki/随机变量" target="_blank" rel="noopener">随机变量</a>的<a href="https://zh.wikipedia.org/w/index.php?title=数字特征&action=edit&redlink=1" target="_blank" rel="noopener">数字特征</a>，并将其作为问题的解。这种方法多用于求解复杂的多维积分问题。</p></blockquote><p>但实际上最常见的应用本身似乎并不像这些概念一般晦涩难懂，例如积分和圆周率的求解，用事件发生的频率来估计事件的概率，通过快速大量的模拟实验来得到问题的近似解：</p><p><img src="fig_monte_carlo_pi.gif" alt></p><blockquote><p>蒙特卡洛是摩纳哥公国的一座城市，位于欧洲地中海之滨、法国的东南方，属于一个版图很小的国家摩纳哥公国，世人称之为“赌博之国”、“袖珍之国”、“邮票小国”。</p><p>蒙特卡洛的赌业，海洋博物馆的奇观，格蕾丝王妃的下嫁，都为这个小国增添了许多传奇色彩，作为世界上人口最密集的一个国度，摩纳哥在仅有1.95平方千米的国土上聚集了3.3万的人口，可谓地窄人稠。但相对于法国，摩纳哥的地域实在是微乎其微，在法国地图上，这个国中之国就像一小滴不慎滴在法国版图内的墨汁，小得不大会引起人去注意它的存在。</p></blockquote><p>也许从名字的来源上可以更好的理解蒙特卡罗的思想：其要解决的问题是，假设概率分布的定义已知，通过抽样获得概率分布的随机样本，并以此来对概率分布的特征进行分析。比如，从样本得到经验分布，从而估计总体分布，或者从样本计算出样本均值，从而估计总体期望，核心是<strong>随机抽样</strong>。随着采样的增多，得到正确结果的概率逐渐加大，但是除非采用确定性方法进行采样，否则无法确定得到的是否为真正的正确结果。</p><h4 id="接受-拒绝抽样法"><a href="#接受-拒绝抽样法" class="headerlink" title="接受-拒绝抽样法"></a>接受-拒绝抽样法</h4><p>有些时候分布$p(x)$无法直接采样，则我们可以通过找一个可以直接抽样的分布$q(x)$，即建议分布（proposal distribution）来间接采样。这里需要保证的是$cq(x)&gt;p(x),c&gt;0$始终成立，假设我们的抽样结果是$x^{x}$，则我们根据$\frac{p(x^x)}{cq(x^x)}$的概率来接受（即按照均匀分布在$(0,1)$范围内抽样，$u\leq\frac{p(x^x)}{cq(x^x)}$就接受）此次抽样：</p><p><img src="fig_accept_reject_sampling.png" alt></p><p>重复上述步骤则可以得到概率分布的随机样本$x_1,x_2,\cdots,x_n$。</p><p>但实际上，针对一些复杂的分布我们只能得到其条件分布（边缘分布），却很难得到概率分布的一般形式，这个时候该方法并不适用。</p><h3 id="马尔科夫链蒙特卡罗法"><a href="#马尔科夫链蒙特卡罗法" class="headerlink" title="马尔科夫链蒙特卡罗法"></a>马尔科夫链蒙特卡罗法</h3><p>一般蒙特卡罗法中的抽样样本是独立的，而马尔科夫蒙特卡罗法中的抽样样本不是独立的，样本序列行程马尔科夫链。</p><h4 id="马尔科夫过程"><a href="#马尔科夫过程" class="headerlink" title="马尔科夫过程"></a>马尔科夫过程</h4><p>马尔科夫过程（Markov Process），又称为马尔科夫链（Markov Chain），其直观解释是：未来只依赖于现在，而与过去无关。</p><p>定义：考虑一个随机变量序列$X=\{ X_0,X_1,\cdots ,X_t,\cdots \}$，每个随机变量的取值集合都相同，即状态空间$S$，随机变量可以是离散或连续的，下标表示时间，以上序列构成随机过程。</p><p>假设$P(X_0)=\pi_0$，称为初始状态分布，在某个时刻随机变量$X_t$只与前一个时刻$X_{t-1}$有条件分布$P(X_t \mid X_{t-1})$，而不依赖过去的随机变量，这一性质成为马尔科夫性，即：<br>$$<br>P(X_t\mid X_0,X_1,\cdots,X_t,\cdots)=P(X_t \mid X_{t-1}),\quad t=1,2,\cdots<br>$$<br>具有该性质的随机序列成为马尔科夫过程，具备离散状态的马尔科夫过程通常成为马尔科夫链。</p><p>上述条件分布又称作马尔科夫链的概率转移分布，决定了马尔科夫链的特性。</p><p>若概率转移分布与时间无关，称为时间齐次（time homogeneous）的马尔科夫链，即：<br>$$<br>P(X_{t+s}\mid X_{t-1+s})=P(X_t \mid X_{t-1}),\quad t=1,2,\cdots;\quad s=1,2,\cdots<br>$$<br>以上定义为一阶马尔科夫链，若扩展到$n$阶，则是只与过去$n$个时刻相关。</p><p>之后讨论的默认都是时间齐次一阶马尔科夫链。</p><h4 id="概率转移与平稳分布"><a href="#概率转移与平稳分布" class="headerlink" title="概率转移与平稳分布"></a>概率转移与平稳分布</h4><p>马尔科夫链的转移概率可以用如下矩阵表示：<br>$$<br>P=\left[\begin{array}{cccc}{p_{11}} &amp; {p_{12}} &amp; {p_{13}} &amp; {\cdots} \\ {p_{21}} &amp; {p_{22}} &amp; {p_{23}} &amp; {\cdots} \\ {p_{31}} &amp; {p_{32}} &amp; {p_{33}} &amp; {\cdots} \\ {\cdots} &amp; {\cdots} &amp; {\cdots} &amp; {\cdots}\end{array}\right]<br>$$<br>满足所有元素不为负且列和为1，该矩阵又称为随机矩阵。</p><p>形象的解释是，当前的状态转移到其他所有状态都有可能，具体的概率取决于当前状态和其他的状态，但可能性的总和为1，例如下图：</p><p><img src="fig_markov_chain_example.png" alt></p><p>马尔科夫链的初始状态分布可以表示为：<br>$$<br>\pi(0)=\left[\begin{array}{c}{\pi_{1}(0)} \\ {\pi_{2}(0)} \\ {\vdots}\end{array}\right]<br>$$<br>那一次状态转移的过程就可以表示成一次矩阵乘法的形式，实际上，递推可以得到：<br>$$<br>\pi(t)=P^t\pi(0)<br>$$<br>这里的$P^t$称为$t$步转移概率矩阵。</p><p><strong>平稳分布</strong>：在此状态进行随机状态转移，之后任一时刻的状态分布都是该分布。求解平稳分布，只需要假设平稳分布代入上述转移解方程即可。</p><p>若有唯一平稳分布存在，当$t$足够大时，$P^t$的每一列都是平稳分布（遍历定理）。</p><blockquote><p>马尔科夫链可能存在唯一、无穷或零个平稳分布</p></blockquote><h4 id="马尔科夫链蒙特卡罗法随机抽样"><a href="#马尔科夫链蒙特卡罗法随机抽样" class="headerlink" title="马尔科夫链蒙特卡罗法随机抽样"></a>马尔科夫链蒙特卡罗法随机抽样</h4><p>TODO</p><h3 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h3><p>贝叶斯公式的形式本身很简单，但是具体到应用问题却总是让人云里雾里的，原始的定义如下：<br>$$<br>P\left(B_{i} | A\right)=\frac{P\left(B_{i}\right) P\left(A | B_{i}\right)}{\sum_{j=1}^{n} P\left(B_{j}\right) P\left(A | B_{j}\right)} =\frac{P\left(B_{i}\right) P\left(A | B_{i}\right)}{P\left(A\right)}<br>$$<br>后验为先验（Prior）与似然（Likelihood）的乘积除以证据（Evidence），但是使用这种方法表示并不好理解，之前发现一张很生动的图：</p><p><img src="fig_bayes.jpg" alt></p><p>我们假定数据为$X$，需要推断的参数为$\theta$，则贝叶斯公式可以表示为：<br>$$<br>P\left(\theta \mid X\right)=\frac{P\left(X \mid \theta\right) P\left(\theta \right)}{P\left(X\right)}<br>$$</p><p>频率派认为$\theta$是未知的常量，而$X$则是随机变量，主要研究样本空间，计算得到一个参数使得得到样本的概率最大：<br>$$<br>\theta_{MLE}=\arg \max _{\theta} \underbrace{\log P(X | \theta)}_{L(\theta)}<br>$$<br>而贝叶斯派则认为$\theta$是服从概率分布的随机变量，其分布$P(\theta)$称为先验，样本则是固定的，主要研究参数的分布，找到一个概率分布最大的点来做估计，即最大后验估计（ Maximum a Posterior ）：<br>$$<br>\theta_{MAP}=\arg \max _{\theta} {P(\theta \mid X)}<br>$$</p><h4 id="贝叶斯预测"><a href="#贝叶斯预测" class="headerlink" title="贝叶斯预测"></a>贝叶斯预测</h4><p>我们假定有一个新的样本$\tilde{x}$，则我们需要求的就是$p(\tilde{x} | X)$的分布，通过$X–&gt;\theta–&gt;\tilde{x}$把旧数据和新数据连接起来：<br>$$<br>\begin{array}{l}{p(\tilde{x} | X)=\int_{\theta}p(\tilde{x}, \theta | X) d \theta} {=\int_{\theta} p(\tilde{x} | \theta,X) p(\theta | X) d \theta}{=\int_{\theta} p(\tilde{x} | \theta) p(\theta | X) d \theta}\end{array}<br>$$<br>中间一步是条件概率公式，左侧的条件概率中$X$不相关可以被去除。</p><h3 id="状态空间模型"><a href="#状态空间模型" class="headerlink" title="状态空间模型"></a>状态空间模型</h3><p>通常状态空间模型定义如下：<br>$$<br>x_k=f_k(x_{k-1},u_{k-1})\\<br>y_k=h_k(x_k,n_k)<br>$$<br>其中，$k$代表时刻，$x_k$代表$k$时刻的状态，$y_k$代表$k$时刻的观测，$f(\cdot)$代表状态转移函数，$g(\cdot)$代表观测函数，$u_{k-1}$代表$k-1$时刻的模型噪声（如模型不够精确），$n_k$则代表$k$时刻的观测噪声（如观测设备的不准确）。<strong>状态本身是不能直接得到的，只能通过观测来估计。</strong>由于噪声的存在，我们无法估计出真实的状态，只能根据我们的观测以及某种最优准则（MinimalMSE，MAP等）得出一个估计值。</p><p>下图中使用了$x$来表示观测，$z$表示状态（潜变量）：</p><p><img src="fig_state_model.jpg" alt></p><p>实际上因为我们是先进行预测操作，因此$k$时刻的模型噪声实际上是用$u_{k-1}$来表示。算法是迭代/递归的，在系统中我们不需要保存以往的观测数据，只需要根据目前的观测、之前的计算结果以及动态更新的函数即可。</p><p>这里实际上遵循了两个假设，这在预测和更新的推导中非常重要：</p><ul><li>（时间）齐次（一阶）马尔科夫假设：状态只与前一个状态有关</li><li>观测独立假设：每一个观测互相独立</li></ul><h3 id="非线性贝叶斯跟踪"><a href="#非线性贝叶斯跟踪" class="headerlink" title="非线性贝叶斯跟踪"></a>非线性贝叶斯跟踪</h3><p>从贝叶斯理论的观点来看，实时跟踪系统的状态就是根据到时间$k$为止的已知信息（观测）$y_{1:k}$，来递归地计算出状态$x_k$的可信度，用概率密度函数$p(x_k\mid y_{1:k})$来表示。</p><p>我们假设初始概率密度函数$p(x_0\mid y_{0})\equiv p(x_0)$是已知（先验概率）的，则通过迭代<strong>预测</strong>和<strong>更新</strong>两个步骤就可以递归地计算出$p(x_k\mid y_{1:k})$。</p><p>假设$p(x_{k-1}\mid y_{1:k-1})$已知，在$k$时间进行上述两步操作（实际上，对下一步的预测在当前就可以进行）。</p><h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><p>利用查普曼-科尔莫戈罗夫等式（Chapman–Kolmogorov equation），可以由状态转移函数与时间 ${k-1}$的概率密度函数，$p(x_{k-1}\mid y_{1:k-1})$计算出时间$k$的<strong>先验概率</strong>${p(x_{k}\mid y_{1:k-1})}$。</p><p>由于状态转移模型被假设为一阶马尔科夫过程，故${p(x_{k}\mid x_{k-1}, y_{1:k-1})}=p(x_{k}\mid x_{k-1})$，而$p(x_{k}\mid x_{k-1})$则由<strong>状态转移函数</strong>和$v_{k-1}$的统计值得到:<br>$$<br>\begin{aligned} p\left(x_{k} | y_{1: k-1}\right) &amp;=\int p\left(x_{k}, x_{k-1} | y_{1: k-1}\right) d x_{k-1} \\ &amp;=\int p\left(x_{k} | x_{k-1}, y_{1: k-1}\right) p\left(x_{k-1} | y_{1: k-1}\right) d x_{k-1} \\ &amp;=\int p\left(x_{k} | x_{k-1}\right) p\left(x_{k-1} | y_{1: k-1}\right) d x_{k-1} \end{aligned}<br>$$</p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>在时间$k$时我们获得了新的观测值$y_k$，因此可以利用贝叶斯法则，由<strong>先验概率</strong>${p(x_{k}\mid y_{1:k-1})}$得到<strong>后验概率</strong>${p(x_{k}\mid y_{1:k})}$，即考虑观测值后的概率，其中的似然概率函数$p\left(y_{k} | x_{k}\right)$由<strong>观测函数</strong>和$n_k$的统计值得到：<br>$$<br>{p\left(x_{k} | y_{1: k}\right)=\frac{p\left(y_{k} | x_{k}\right) p\left(x_{k} | y_{1: k-1}\right)}{p\left(y_{k} | y_{1: k-1}\right)}} \<br>$$<br>其中的归一化常数（Evidence）为：<br>$$<br>{p\left(y_{k} | y_{1: k-1}\right)=\int p\left(y_{k} | x_{k}\right) p\left(x_{k} | y_{1: k-1}\right) d x_{k}}<br>$$<br>我们也可将后验概率表示为如下形式，就能得到递归更新的公式，即我们的滤波问题可以通过上一个规模更小的滤波问题来求解：<br>$$<br>\begin{aligned} p\left(x_{k} | y_{1: k}\right)&amp;=\frac{p\left(x_{k} , y_{1: k}\right)}{p\left(y_{1: k}\right)}\\&amp;=\frac{p\left(y_{1: {k-1}}\right)p\left(x_{k} , y_{k} \mid y_{1: {k-1}}\right)}{p\left(y_{1: {k-1}}\right)p\left(y_{k} | y_{1: k-1}\right)}\\&amp;=\frac{p\left(y_{k} | x_{k}, y_{1: k-1}\right) p\left(x_{k} | y_{1: k-1}\right)}{p\left(y_{k} | y_{1: k-1}\right)} \\ &amp;=\frac{p\left(y_{k} | x_{k}, y_{1: k-1}\right) p\left(x_{k} | x_{k-1}, y_{1: k-1}\right) p\left(x_{k-1} | y_{1: k-1}\right)}{p\left(y_{k} | y_{1: k-1}\right)} \\ &amp;=\frac{p\left(y_{k} | x_{k}\right) p\left(x_{k} | x_{k-1}\right) p\left(x_{k-1} | y_{1: k-1}\right)}{p\left(y_{k} | y_{1: k-1}\right)} \\ &amp; \propto p\left(y_{k} | x_{k}\right) p\left(x_{k} | x_{k-1}\right) p\left(x_{k-1} | y_{1: k-1}\right) \end{aligned}<br>$$<br>上述两步骤的递推关系是贝叶斯最优解的基本概念，但是公式中使用的积分，对于一般非线性，非高斯的系统，难以得到解析解，因此需要使用蒙特卡罗方法来近似。</p><h4 id="总体步骤"><a href="#总体步骤" class="headerlink" title="总体步骤"></a>总体步骤</h4><p>总体而言，我们的跟踪过程（即Inference，测试过程，算法参数是在训练过程确定的）分为两部分，即更新（Update/Filtering）和预测（Prediction），在此基础上迭代进行：<br>$$<br>t=1,\left\{\begin{array}{l}{p\left(x_{1} | y_{1}\right) \quad – \quad update} \\ {p\left(x_{2} | y_{1}\right)\quad – \quad prediction }\end{array}\right.\\ \<br>t=2,\left\{\begin{array}{l}{p\left(x_{2} | y_{1:2}\right) \quad – \quad update} \\ {p\left(x_{3} | y_{1:2}\right)\quad – \quad prediction }\end{array}\right.\\ \\<br>\vdots \\ \\<br>t=T,\left\{\begin{array}{l}{p\left(x_{T} | y_{1:T}\right) \quad – \quad update} \\ {p\left(x_{T+1} | y_{1:T}\right)\quad – \quad prediction }\end{array}\right.\<br>$$</p><h3 id="卡尔曼滤波"><a href="#卡尔曼滤波" class="headerlink" title="卡尔曼滤波"></a>卡尔曼滤波</h3><blockquote><p>卡尔曼、粒子滤波实际应该叫做估计器（Estimator），估计当前值叫滤波（Filtering），估计过去叫平滑（Smoothing），估计未来叫预测（Predicting）。</p><p>卡尔曼滤波利用目标的动态信息，设法去掉噪声的影响，得到一个关于目标位置的好的估计。这个估计可以是对当前目标位置的估计（滤波），也可以是对于将来位置的估计（预测），也可以是对过去位置的估计（插值或平滑）。 </p></blockquote><p>卡尔曼滤波假设系统状态与噪声是高斯的，可以用均值和方差来描述。则上述状态空间模型可以被表述为：<br>$$<br>x_k=F_kx_{k-1}+B_ku_k+v_{k} \\\quad<br>y_k=H_kx_{k}+n_k<br>$$<br>其中：</p><ul><li>$F_k$是作用在$x_{k-1}$状态变换模型</li><li>$H_k$是作用在$x_{k}$的状态到观测变换模型</li><li>$B_k$是作用在控制器向量$u_k$上的输入-控制模型（系统内部控制）</li><li>$v_{k}$是过程噪声（预测噪声），并假定$v_{k} \thicksim N(0,Q_k)$</li><li>$n_k$是观测噪声，并假定$n_{k} \thicksim N(0,R_k)$</li></ul><p>我们使用$P_k$来表示后验估计的误差协方差矩阵，用于度量估计值的精确程度（不确定性），矩阵的值表示各个变量的相关程度，则</p><p>$P_k=F_kP_{k-1}F_{k}^T+Q_k$。</p><p>综合我们的预测结果和观测结果，我们得到如下两个高斯分布：<br>$$<br>\begin{array}{l}{\left(\vec{\mu}_{0}, \Sigma_{0}\right)=\left(\mathbf{H}_{k} {\mathbf{x}}_{k}, \mathrm{H}_{k} \mathrm{P}_{k} \mathrm{H}_{k}^{T}\right)} \\ {\left(\vec{\mu}_{1}, \mathbf{\Sigma}_{1}\right)=\left(\mathrm{y}_{k}, \mathbf{R}_{k}\right)}\end{array}<br>$$<br>将这两个高斯概率密度函数相乘，我们就得到了一个新的高斯分布，这正是卡尔曼滤波想要的<strong>最优估计</strong>。</p><p>新的分布如下所示：<br>$$<br>\begin{aligned} \mathbf{K} &amp;=\Sigma_{0}\left(\Sigma_{0}+\Sigma_{1}\right)^{-1} \\ \vec{\mu}^{\prime} &amp;=\overrightarrow{\mu_{0}}+\mathrm{K}(\overrightarrow{\mu_{1}}-\overrightarrow{\mu_{0}}) \\ \Sigma^{\prime} &amp;=\Sigma_{0}-\mathrm{K} \Sigma_{0} \end{aligned}<br>$$<br>也即：<br>$$<br>\begin{aligned} \mathbf{K} &amp;=\mathrm{H}_{k} \mathrm{P}_{k} \mathrm{H}_{k}^{T}\left(\mathrm{H}_{k} \mathrm{P}_{k} \mathrm{H}_{k}^{T}+\mathbf{R}_{k}\right)^{-1} \\ \mathbf{H}_{k} {\mathbf{x}}_{k}^{\prime} &amp;=\mathbf{H}_{k} {\mathbf{x}}_{k}+\mathrm{K}\left(\mathrm{y}_{k}-\mathrm{H}_{k} {\mathbf{x}}_{k}\right) \\ \mathbf{H}_{k} \mathbf{P}_{k}^{\prime} \mathbf{H}_{k}^{T} &amp;=\mathrm{H}_{k} \mathrm{P}_{k} \mathrm{H}_{k}^{T}-\mathrm{KH}_{k} \mathrm{P}_{k} \mathrm{H}_{k}^{T} \end{aligned}<br>$$<br>化简可得：<br>$$<br>\begin{aligned} {\mathbf{x}}_{k}^{\prime} &amp;={\mathbf{x}}_{k} +\mathbf{K}^{\prime}\left(y_{k}-\mathbf{H}_{k} {\mathbf{x}}_{k}\right) \\ \mathbf{P}_{k}^{\prime} &amp;=\mathrm{P}_{k} -\mathbf{K}^{\prime} \mathbf{H}_{k} \mathbf{P}_{k} \\ \mathbf{K}^{\prime} &amp;=\mathbf{P}_{k} \mathbf{H}_{k}^{T}\left(\mathrm{H}_{k} \mathrm{P}_{k} \mathrm{H}_{k}^{T}+\mathbf{R}_{k}\right)^{-1} \end{aligned}<br>$$<br>其中的$K^\prime$就是<strong>卡尔曼增益</strong>。</p><p>由此我们可以得到卡尔曼滤波的具体实现：</p><h4 id="预测-1"><a href="#预测-1" class="headerlink" title="预测"></a>预测</h4><p>$$<br>x=Fx+Bu \\ \quad P=FPF^T+Q<br>$$</p><h4 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h4><p>$$<br>dy =y-Hx \\ S =HPH^{T}+R \\ K =PH^{T} S^{-1} \\ x =x+K * {dy}<br>$$</p><p>$$<br>P =({I}-{K}{H}) *{P}<br>$$</p><p>其中，$dy$为观测余量，$S$为观测余量的协方差矩阵。</p><p>状态转移矩阵$F$，状态到观测的变换矩阵$H$通常都由训练数据得到，在测试过程中保持不变。</p><p>系统状态$x$，误差协方差矩阵$P$，卡尔曼增益$K$是不断迭代更新的，实际应用时$Q$和$R$依据具体情况来确定，可以不断调试寻找最优解，也可以是可变的。</p><p>那么$x$与$P$的初值该如何设定呢？只要在合理的范围内，无论是使用测试集真实Label还是默认值，都不会对结果产生很大的影响，算法会自动收敛。</p><p><strong>对卡尔曼增益$K$</strong>的理解：</p><p>在《An Introduction to the Kalman Filter by Greg Welch and Gary Bishop》中曾提到，当我们的观测噪声协方差$R$趋向于0时，卡尔曼增益会给残差更大的权重，这实际也就是说更加倾向于观测的结果，如果噪声为0，则表示完全相信观测，反之则更加倾向于预测的结果。</p><p>需要补充的一点是，$K$是由<code>最小化后验估计误差协方差</code>的目标推导而来的，如果状态转移矩阵$F$，状态到观测的变换矩阵$H$，以及观测误差$R$与估计误差（过程噪声）$Q$都是给定不变的，则$K$随着时间的变化序列<strong>与具体的输入（观测）无关</strong>。</p><h3 id="扩展卡尔曼滤波"><a href="#扩展卡尔曼滤波" class="headerlink" title="扩展卡尔曼滤波"></a>扩展卡尔曼滤波</h3><p>卡尔曼滤波器假设了两个条件：噪声符合高斯分布；系统是线性系统。此外，噪声、状态转移函数、观测函数通常是不变的。</p><p>实际中的问题可能并不满足这两个假设，扩展卡尔曼滤波通过将非线性系统线性化的方法处理非线性系统。</p><p>TODO</p><h3 id="粒子滤波"><a href="#粒子滤波" class="headerlink" title="粒子滤波"></a>粒子滤波</h3><blockquote><p><strong>粒子滤波器</strong>（particle filter）是一种使用<a href="https://zh.wikipedia.org/wiki/蒙特卡罗方法" target="_blank" rel="noopener">蒙特卡罗方法</a>的<a href="https://zh.wikipedia.org/wiki/递归滤波器" target="_blank" rel="noopener">递归滤波器</a>，透过一组具有权重的随机样本（称为粒子）来表示<a href="https://zh.wikipedia.org/wiki/事件_(概率论)" target="_blank" rel="noopener">随机事件</a>的<a href="https://zh.wikipedia.org/wiki/后验概率" target="_blank" rel="noopener">后验概率</a>，从含有噪声或不完整的观测序列，估计出动力系统的状态，粒子滤波器可以运用在任何<a href="https://zh.wikipedia.org/wiki/状态空间" target="_blank" rel="noopener">状态空间</a>的模型上。</p><p>粒子滤波器是<a href="https://zh.wikipedia.org/wiki/卡尔曼滤波" target="_blank" rel="noopener">卡尔曼滤波器</a>的一般化方法，卡尔曼滤波器建立在线性的状态空间和<a href="https://zh.wikipedia.org/wiki/正态分布" target="_blank" rel="noopener">高斯分布</a>的噪声上；而粒子滤波器的状态空间模型可以是非线性，且噪声分布可以是任何型式。</p></blockquote><p>看简介可以发现，粒子滤波的范围比卡尔曼滤波器更广，但是计算量要大上不少。</p><h4 id="序列重要性采样（Sequential-Importance-Sampling-SIS）"><a href="#序列重要性采样（Sequential-Importance-Sampling-SIS）" class="headerlink" title="序列重要性采样（Sequential Importance Sampling, SIS）"></a>序列重要性采样（Sequential Importance Sampling, SIS）</h4><p>SIS将后验概率${p(x_{k}\mid y_{1:k})}$用$N$个随机采样的样本（称作粒子）与其各自的权重表示为：<br>$$<br>\{x_k^{(i)},w_k^{(i)}\}_{i=1}^{N}<br>$$<br>其中权重则根据重要性采样的规则产生，且$\sum w_i=1$，则函数的期望可以用加权平均来近似：<br>$$<br>\int f\left(x_{k}\right) p\left(x_{k} | y_{1: k}\right) d x_{k} \approx \sum_{i=1}^{N} w_{k}^{(i)} f\left(x_{k}^{(i)}\right)<br>$$<br>SIS是将重要性采样递归执行的方法，通过前一次采样的权重来计算下一次采样的权重，假设采样的样本分布可以表示为：<br>$$<br>x^{(i)}\thicksim q(x),i=1,\cdots ,N<br>$$<br>其中$q(x)$称为<strong>重要性密度（importance density）</strong> ，也就是我们之前说的建议分布，若样本$x_k^{(i)}$（$k$是时间下标）由重要性密度$q(x_k\mid y_{1:k})$抽取出来，则权重可以表示为：<br>$$<br>w_{k}^{(i)} \propto \frac{p\left(x_{k}^{(i)} | y_{1: k}\right)}{q\left(x_{k}^{(i)} | y_{1: k}\right)}<br>$$<br>将重要性密度分解为（假定有这个分解）：<br>$$<br>q\left(x_{k} | y_{1: k}\right)=q\left(x_{k} | x_{k-1}, y_{1: k}\right) q\left(x_{k-1} | y_{1: k-1}\right)<br>$$<br>再将后验概率表示为：<br>$$<br>\begin{aligned} p\left(x_{k} | y_{1: k}\right)&amp;=\frac{p\left(x_{k} , y_{1: k}\right)}{p\left(y_{1: k}\right)}\\&amp;=\frac{p\left(y_{1: {k-1}}\right)p\left(x_{k} , y_{k} \mid y_{1: {k-1}}\right)}{p\left(y_{1: {k-1}}\right)p\left(y_{k} | y_{1: k-1}\right)}<br>\\&amp;=\frac{p\left(y_{k} | x_{k}, y_{1: k-1}\right) p\left(x_{k} | y_{1: k-1}\right)}{p\left(y_{k} | y_{1: k-1}\right)} \\ &amp;=\frac{p\left(y_{k} | x_{k}, y_{1: k-1}\right) p\left(x_{k} | x_{k-1}, y_{1: k-1}\right) p\left(x_{k-1} | y_{1: k-1}\right)}{p\left(y_{k} | y_{1: k-1}\right)} \\ &amp;=\frac{p\left(y_{k} | x_{k}\right) p\left(x_{k} | x_{k-1}\right) p\left(x_{k-1} | y_{1: k-1}\right)}{p\left(y_{k} | y_{1: k-1}\right)} \\ &amp; \propto p\left(y_{k} | x_{k}\right) p\left(x_{k} | x_{k-1}\right) p\left(x_{k-1} | y_{1: k-1}\right) \end{aligned}<br>$$<br>则权重的递归式可以表示为：<br>$$<br>\begin{aligned} w_{k}^{(i)} &amp; \propto \frac{p\left(y_{k} | x_{k}^{(i)}\right) p\left(x_{k}^{(i)} | x_{k-1}^{(i)}\right) p\left(x_{k-1}^{(i)} | y_{1: k-1}\right)}{q\left(x_{k}^{(i)} | x_{k-1}^{(i)}, y_{1: k}\right) q\left(x_{k-1}^{(i)} | y_{1: k-1}\right)} \\ &amp;=w_{k-1}^{(i)} \frac{p\left(y_{k} | x_{k}^{(i)}\right) p\left(x_{k}^{(i)} | x_{k-1}^{(i)}\right)}{q\left(x_{k}^{(i)} | x_{k-1}^{(i)}, y_{1: k}\right)} \end{aligned}<br>$$</p><h4 id="序列重要性重采样（Sequential-Importance-Resampling-SIR）"><a href="#序列重要性重采样（Sequential-Importance-Resampling-SIR）" class="headerlink" title="序列重要性重采样（Sequential Importance Resampling, SIR）"></a>序列重要性重采样（Sequential Importance Resampling, SIR）</h4><p>经过几次迭代之后，很多例子的权重都变小到可以忽略不计，这就是SIS会造成的<strong>退化问题（degeneracy problem）</strong> 。我们定义有效粒子数为：<br>$$<br>\widehat{N_{e f f}}=\frac{1}{\sum_{i=1}^{N}\left(w_{k}^{(i)}\right)^{2}}<br>$$<br>若有效粒子数小于某一阈值，则对粒子做重采样，即可减缓退化问题。重采样的概念是去除权重过小的粒子，专注于权重较大的粒子。进行重采样时，要<strong>由现有的粒子分布取样</strong>，产生一组新的粒子。由于新样本独立同分布，因此权重重新设定为$\frac{1}{N}$。</p><p>粒子滤波的核心思想是随机采样+重要性重采样+预测，如下图所示：</p><p><img src="fig_particle_filter.jpg" alt></p><p>若我们选取$q\left(x_{k}^{(i)} | x_{k-1}^{(i)}, y_{1: k}\right)=p(x_k\mid x_{k-1})$，则采样方式被确定，权重更新也可以被化简为$w_{k}^{(i)} \propto w_{k-1}^{(i)} p\left(y_{k} | x_{k}^{(i)}\right)$。该想法被称为“Generate and Test”，即根据状态生成现有观测，若生成的概率越大则采样的权重也就越大。</p><h4 id="SIR算法流程"><a href="#SIR算法流程" class="headerlink" title="SIR算法流程"></a>SIR算法流程</h4><p>前提：$k-1$时刻的采样已经完成，$w_{k-1}^{(i)}$已知。</p><ul><li><p>SIS：针对所有样本进行采样，并更新样本权重<br>$$<br>\begin{aligned} &amp;for \ i=1,\cdots ,N \\x_k^{(i)}&amp;\thicksim q(x_k\mid x_{k-1},y_{1:k}) \\w_{k}^{(i)} &amp; \propto w_{k-1}^{(i)} \frac{p\left(y_{k} | x_{k}^{(i)}\right) p\left(x_{k}^{(i)} | x_{k-1}^{(i)}\right)}{q\left(x_{k}^{(i)} | x_{k-1}^{(i)}, y_{1: k}\right)}\end{aligned}<br>$$</p></li><li><p>归一化样本权重</p></li><li><p>计算$\widehat{N_{e f f}}$，若$\widehat{N_{e f f}}&lt;N_T$则需要重采样</p></li><li><p>重采样的方法很多，一种方法是利用概率密度函数PDF的积分CDF来均匀采样，具体的算法流程如下：</p><p><img src="fig_particle_filter_resample.png" alt></p></li></ul><p>也就是说每个样本现在对应$[0,1]$之间的某个区间，权重越大的对应的区间越长，我们在$[0,1]$之间均匀采点，并取该点对应的样本，最后所有样本的权重重置为$\frac{1}{N}$。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>统计学习方法（第二版）-李航</li><li><a href="https://www.jianshu.com/p/f6ce8943560c?from=singlemessage" target="_blank" rel="noopener">轻松理解卡尔曼滤波</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卡尔曼滤波器 </tag>
            
            <tag> 粒子滤波器 </tag>
            
            <tag> 蒙特卡罗方法 </tag>
            
            <tag> 贝叶斯理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[DL]Winograd快速卷积算法</title>
      <link href="/2019/11/13/dl-winograd-kuai-su-juan-ji-suan-fa/"/>
      <url>/2019/11/13/dl-winograd-kuai-su-juan-ji-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>卷积神经网络是很多任务尤其是计算机视觉任务的基础，但很大程度上，模型需要的大量卷积计算限制了模型的可用性。因此，如何快速的完成卷积操作就至关重要。</p><p>此处的卷积是指图像处理领域的卷积操作，且数据通常为多通道的二维数组，卷积核的长宽相等。</p><p>常用的优化方法包括三个方面：</p><ul><li>硬件：堆数据堆模型再堆硬件是提升性能最常见的手段，本文假设读者都是买不起煤气灶的穷人</li><li>模型复杂度：降低模型复杂度包括降低参数冗余的花式的卷积设计，如ShuffleNet中的分组卷积+通道混合，MobileNet中的Depthwise和Pointwise分解卷积等，以及模型的裁剪、量化和稀疏化。</li><li>框架计算速度：目前主流的深度学习框架在加快计算上，一方面是利用数据SIMD的特性，进行硬件上并行化（SSE、Neon、线程并行），又或者通过一些矢量化手段（如Caffe、MXNet中的im2col）来充分利用软硬件的特点，实现更高的计算速度，另一方面则是像FFT、<a href="https://www.jianshu.com/p/dc67e4a3c841" target="_blank" rel="noopener">Strassen算法</a>以及Winograd算法等在卷积计算原理上不同的方法，从而减少了计算量。</li></ul><p>本文介绍的 Winograd 是存在已久最近被重新发现的方法（The Coppersmith-Winograd Matrix Multiplication Algorithm），在大部分场景中，Winograd 方法都显示和较大的优势，目前TF Lite、Tencent NCNN、Ali MNN 中计算卷积就使用了该方法。详述该方法并进行测试的是CVPR 2016中的一篇文章《Fast Algorithms for Convolutional Neural Networks》，本文主要以该文章来进行方法的介绍和讲解。</p><p>贴两张ARM报告的图来说明一下问题，换言之，我们的问题是需要在<strong>模型（耗时操作主要是小型卷积核如3x3的卷积）和设备确定</strong>的情况下，在<strong>Inference阶段</strong>尽可能快地计算卷积结果。</p><p><img src="fig_arm_1.png" alt></p><p><img src="fig_arm_2.png" alt></p><h2 id="卷积问题定义"><a href="#卷积问题定义" class="headerlink" title="卷积问题定义"></a>卷积问题定义</h2><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>$Image_{H\cdot W\cdot C}$:表示一张多通道（通常为三通道的）图片，使用$I$表示，下标视情况省略，当$C$为1时，表示灰度图，当$W$为1时，表示一维数据</p><p>$Kernel_{R\cdot R}$：表示一个大小为$R$的二维卷积核，使用$K$表示</p><p>$Height/Row,Width/Col,Channel/Depth$：分别表示一张图片的行，列，通道数</p><p>$I_{OH\cdot OW \cdot OC}=Conv(I_{H\cdot W \cdot C},K_R)$：表示使用卷积核$K$对图像$I$进行卷积操作，得到一张新的图像，为了和论文中一致，我们也使用$F(I_{OH\cdot OW \cdot OC},K_R)$来表示上述操作。</p><h3 id="一维卷积"><a href="#一维卷积" class="headerlink" title="一维卷积"></a>一维卷积</h3><ul><li>形式:$I_{OH}=Conv(I_{H},K_R)$或$F(I_{OH},K_R)$</li></ul><p>输出的图像大小取决于卷积核大小、Stride以及Padding策略，在这里我们假设Stride都是1，没有Padding，且只统计乘法运算，则</p><ul><li>计算量：$FLO=OH\cdot R=(H-R+1)\cdot R$</li></ul><h3 id="二维卷积"><a href="#二维卷积" class="headerlink" title="二维卷积"></a>二维卷积</h3><ul><li>形式:$I_{OH\cdot OW \cdot OC}=Conv(I_{H\cdot W\cdot C},K_R)$或$F(I_{OH\cdot OW \cdot OC},K_R)$</li></ul><p>多个通道的二维卷积遵循层内连乘，层间累加的方法，需要的卷积核数量为$C\cdot OC$:</p><ul><li>计算量：$FLO=(OH\cdot OW \cdot OC)\cdot (R\cdot R)\cdot C$</li></ul><p>具体而言，输出图片的每个通道都是通过一组卷积核在所有通道上相乘累加得到的。</p><p><img src="fig_2d_conv.png" alt></p><p>有兴趣的童鞋可以自己算一下需要的加法操作次数，智障作者算了一下应该是$OP=(OH\cdot OW \cdot OC)\cdot ((R\cdot R-1)\cdot C+C-1)=(OH\cdot OW \cdot OC)\cdot (R\cdot R\cdot C-1)$次，和乘法基本相同。</p><p>具体讨论算法的时候我们假设输入输出的通道数都是1，即$FLO=(OH\cdot OW)\cdot (R\cdot R)$。</p><ul><li>形式:$I_{OH\cdot OW}=Conv(I_{H\cdot W},K_R)$或$F(I_{OH\cdot OW},K_R)$</li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><blockquote><p>在各种开源框架中，CNN中的conv2d层执行的并不是数学上的卷积计算，而是数学上的互相关计算，具体定义的区别请参考《深度学习》Chap9.1或者<a href="https://www.zhihu.com/question/52237725/answer/545340892" target="_blank" rel="noopener">这个</a>。</p></blockquote><p><img src="fig_conv_dlbook1.png" alt></p><p><img src="fig_conv_dlbook2.png" alt></p><p>在传统的图像处理领域，卷积核的参数是<strong>已知的</strong>（且往往是对称的），而在卷积神经网络中则成为了<strong>待定参数</strong>。实际上，虽然说将卷积核上下翻转并左右翻转（即旋转180度）才是真正的卷积操作，但是也可以认为卷积层做的就是卷积，只是特征矩阵是倒序存储的。又或者说由于卷积核的参数是可变的，这样做不但提高了效率也不影响结果。</p><h2 id="跑题：im2col实现"><a href="#跑题：im2col实现" class="headerlink" title="跑题：im2col实现"></a>跑题：im2col实现</h2><p>im2col是一种非常容易理解的矢量化（Vectorization）手段，基于im2col和GEMM（ General Matrix Multiplication ）的方法可以获得较正常卷积计算较高的加速比，具体而言就是把我们每次进行卷积操作时涉及到的元素展开一个列向量，最终得到一个$I_{(R\cdot R)\cdot (OH\cdot OW)}$的矩阵，卷积核则拆成$K_{1\cdot (R\cdot R)}$的向量。</p><p><img src="fig_im2col.png" alt></p><p>按照同样的方法把卷积核展开，最后卷积操作就可以用一个矩阵乘法来表示，计算完成后，再使用col2im将结果转换为图片。</p><p><img src="fig_im2col_result.png" alt></p><p>这里输入是3个通道，输出是1个，相比写4个for循环，im2col<strong>大大加快了计算速度</strong>（矩阵乘法可并行，数据在内存中的存储连续，Cache命中率提高），但是<strong>没有减少计算量，且内存占用几乎倍增</strong>，另外，生成多通道矩阵依然需要写5个循环（NHWCRR），算是一种用空间来换取时间的做法。关于Caffe中im2col和col2im的实现可以看<a href="https://blog.csdn.net/jiongnima/article/details/69736844" target="_blank" rel="noopener">这里</a>，具体的实现细节其实和我们理解的过程是有较大不同的。</p><p><img src="fig_arm_3.png" alt></p><p>需要强调的一点是，由于我们的硬件设计就是良好支持并行化的，所以<strong>算得少</strong>和<strong>算得快</strong>并不能简单的认为是一回事。</p><p>Caffe原作者贾扬清对其框架中卷积实现的吐槽可以看<a href="https://github.com/Yangqing/caffe/wiki/Convolution-in-Caffe:-a-memo" target="_blank" rel="noopener">这里</a>，摘录一段如下：</p><blockquote><p>In the last few months chatting with people about Caffe, a common comment I got was: “<em>Caffe’s convolution has some memory issues</em>.”</p><p>While this is true in some sense, I am not sure whether it is truly an issue - rather, <strong>it is a graduate-student level design choice when I was writing the Caffe framework in just 2 months’ budget with a looming thesis deadline.</strong> It turns out to have its own pros （faster than any trivial implementation unless you optimize really seriously）and cons （large memory consumption） A more detailed explanation follows, if you are interested.</p><p>……</p><p>Thus, I took a simpler approach: reduce the problem to a simpler one, where others have already optimized it really well. </p></blockquote><p>关于傅里叶变换计算卷积的方法在卷积神经网络中并不是很常用（因为一般还没直接算快），可以参看<a href="https://www.zhihu.com/question/264307400" target="_blank" rel="noopener">这个</a>，Strassen则是在矩阵较大时具有较好的加速效果，具体的方法细节之后再详细说</p><p>（因为作者也没完全看懂╮(￣▽￣)╭）。</p><h2 id="Winograd"><a href="#Winograd" class="headerlink" title="Winograd"></a>Winograd</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在我们的硬件受限的情况下（例如只有单核CPU），如何才能变得更高更快更强呢，由于计算一次乘法所需要的时钟周期要比计算一次加法大很多，对于乘法操作我们能够想象的下界是：输入数据的每个元素至少参与一次乘法。这也是我们力求达到的目标，即乘法次数尽可能的靠近下界。</p><p>形式化的表述，针对一个输出长度为$m$，卷积核大小为$r$的卷积运算，其所需要的最小乘法次数与输入数据的长度相同：</p><p>$$\mu(F(I_m, K_r))=m+r-1=H$$</p><p>每个维度相对独立，因此拓展到二维的情况也是一样的：</p><p>$$\begin{aligned} \mu(F(I_{m \cdot n}, K_{r \cdot s})) =\mu(F(I_{m}, K_{r})) \mu(F(I_{n}, K_{s})) =(m+r-1)(n+s-1) \end{aligned}=H \cdot W$$</p><p>该理论最早由<code>Shmuel Winograd</code>于1980年提出，是本文最重要的理论，没有之一。具体而言，给定一个确定的卷积问题，我们可以找到一种变换，来接近（甚至到达）乘法次数的理论下界。根据该理论，在卷积核较小的情况下，我们可以获得相对普通卷积计算而言较大的加速比。 </p><h4 id="F-I-2-K-3-与-F-I-2-cdot-2-K-3-cdot-3"><a href="#F-I-2-K-3-与-F-I-2-cdot-2-K-3-cdot-3" class="headerlink" title="$F(I_2,K_3)$与$F(I_{2\cdot 2},K_{3 \cdot 3})$"></a>$F(I_2,K_3)$与$F(I_{2\cdot 2},K_{3 \cdot 3})$</h4><p>举个例子，$F(I_2,K_3)$表示输入信号$d=\left[ \begin{array}{llll}{d_{0}} &amp; {d_{1}} &amp; {d_{2}} &amp; {d_{3}}\end{array}\right]^{T}$，卷积核$g=\left[ \begin{array}{lll}{g_{0}} &amp; {g_{1}} &amp; {g_{2}}\end{array}\right]^{T}$的一维卷积操作。那么问题就可以表示为如下的形式：</p><p>$$F(I_2,K_3) = \left[ \begin{array}{lll}{d_{0}} &amp; {d_{1}} &amp; {d_{2}} \\ {d_{1}} &amp; {d_{2}} &amp; {d_{3}}\end{array}\right] \left[ \begin{array}{l}{g_{0}} \\ {g_{1}} \\ {g_{2}}\end{array}\right]=\left[ \begin{array}{c}{r_0} \\ {r_1}\end{array}\right]$$</p><p> 如果是一般的矩阵乘法，则需要<strong>6次乘法和4次加法</strong>，如下： </p><p>$$\begin{array}{l}{r_{0}=\left(d_{0} \cdot g_{0}\right)+\left(d_{1} \cdot g_{1}\right)+\left(d_{2} \cdot g_{2}\right)} \\ {r_{1}=\left(d_{1} \cdot g_{0}\right)+\left(d_{2} \cdot g_{1}\right)+\left(d_{3} \cdot g_{2}\right)}\end{array}$$</p><p>但是，卷积运算中输入信号转换成的矩阵不是任意矩阵，其中<strong>有规律地分布着大量的重复元素</strong>，因此卷积转换成的矩阵乘法比一般矩阵乘法的问题域更小，这就让优化存在了可能。</p><p>Winograd的具体做法是， </p><p>$$F(I_2,K_3) = \left[ \begin{array}{lll}{d_{0}} &amp; {d_{1}} &amp; {d_{2}} \\ {d_{1}} &amp; {d_{2}} &amp; {d_{3}}\end{array}\right] \left[ \begin{array}{l}{g_{0}} \\ {g_{1}} \\ {g_{2}}\end{array}\right]=\left[ \begin{array}{c}{m_{1}+m_{2}+m_{3}} \\ {m_{2}-m_{3}-m_{4}}\end{array}\right]$$</p><p>其中，</p><p>$$\begin{array}{ll}{m_{1}=\left(d_{0}-d_{2}\right) g_{0}} &amp; {m_{2}=\left(d_{1}+d_{2}\right) \frac{g_{0}+g_{1}+g_{2}}{2}} \\ {m_{4}=\left(d_{1}-d_{3}\right) g_{2}} &amp; {m_{3}=\left(d_{2}-d_{1}\right) \frac{g_{0}-g_{1}+g_{2}}{2}}\end{array}$$</p><p><strong>在神经网络的推理阶段，卷积核$g$上的元素是固定的</strong>，共3次加法与2次乘法，因此$g$相关的运算可以提前算好，预测阶段只需计算一次，可以忽略，所以一共所需的运算次数<strong>4次乘法和8次加法/减法</strong>，和下界一致。 速度提升比例为<strong>1.5倍</strong>。当然所需要的存储空间也相应的增加，由原来的$r$增加为$H$，即从卷积核大小变成了输入数据的宽度。</p><p>可是这怎么就能减少计算量呢，会不会得到的结果不一样？有兴趣的童鞋可以自行把所有符号代入化简，针对这个例子，得到的结果是<strong>完全相同</strong>的！当然在具体计算的时候可能会存在浮点精度误差。因此在这个例子里面完全就是仅仅使用不同的数学表示就达到了减少计算量的目的，真是太巧妙了。</p><h4 id="一维卷积形式化表述"><a href="#一维卷积形式化表述" class="headerlink" title="一维卷积形式化表述"></a>一维卷积形式化表述</h4><p>上述例子可以用通用矩阵乘法（GEMM）和元素级乘法（EWMM）的混合矩阵变换来形式化表述。</p><p>一维卷积的形式化表述如下：</p><p>$$Y=A^{T}\left[(G g) \odot\left(B^{T} d\right)\right]$$</p><p>详细解释如下：</p><ul><li>$g$：卷积核 ，维度$r\cdot 1$</li><li>$d$：输入信号，维度$H\cdot 1$</li><li>$G$：Filter transform矩阵，用于将卷积核变换到另一个空间，维度$(m+r-1)\cdot r=H \cdot r$</li><li>$B^T$：Input transform矩阵，用于将输入数据变换到另一个空间，维度$(m+r-1)\cdot (m+r-1)=H \cdot H$</li><li>$A^T$：Output transform矩阵，用于将数据转换回输出空间，维度$m\cdot (m+r-1)=m*H$</li><li>$Y$：卷积结果，维度$m\cdot 1$</li></ul><p>其中，$\odot$表示对应位置相乘，暗示此处两个矩阵的维度是一致的，上面的例子里面具体的参数如下，<br>$$<br>B^{T}=\left[ \begin{array}{cccc}{1} &amp; {0} &amp; {-1} &amp; {0} \\ {0} &amp; {1} &amp; {1} &amp; {0} \\ {0} &amp; {-1} &amp; {1} &amp; {0} \\ {0} &amp; {1} &amp; {0} &amp; {-1}\end{array}\right]<br>$$</p><p>$$<br>G=\left[ \begin{array}{ccc}{1} &amp; {0} &amp; {0} \\ {\frac{1}{2}} &amp; {\frac{1}{2}} &amp; {\frac{1}{2}} \\ {\frac{1}{2}} &amp; {-\frac{1}{2}} &amp; {\frac{1}{2}} \\ {0} &amp; {0} &amp; {1}\end{array}\right]<br>$$</p><p>$$<br>A^{T}=\left[ \begin{array}{llll}{1} &amp; {1} &amp; {1} &amp; {0} \\ {0} &amp; {1} &amp; {-1} &amp; {-1}\end{array}\right]<br>$$</p><p>$$<br>g=\left[ \begin{array}{lll}{g_{0}} &amp; {g_{1}} &amp; {g_{2}}\end{array}\right]^{T},d=\left[ \begin{array}{llll}{d_{0}} &amp; {d_{1}} &amp; {d_{2}} &amp; {d_{3}}\end{array}\right]^{T}<br>$$</p><p>整个计算过程在逻辑上可以分为4步：</p><ul><li>Input transform</li><li>Filter transform</li><li>Hadamard product（ 哈达玛积 ）</li><li>Output transform</li></ul><p>此处，$A^{T}$即$m$前面的系数，$B^{T}$即数据$d$前面的系数，$G$即卷积核$g$前面的系数，由于卷积核相关参数是提前计算好的，虽然我们将卷积的过程表述成了矩阵乘法的形式，<strong>但是此处只有$\odot$包含了乘法</strong>，其他的系数全是$\pm 1$，因此只有加减法。之后会提到具体如何实现，有兴趣的同学可以先自己思考一下下。</p><h4 id="二维卷积形式化表述"><a href="#二维卷积形式化表述" class="headerlink" title="二维卷积形式化表述"></a>二维卷积形式化表述</h4><p>文中关于一维卷积向二维卷积的扩展只有寥寥数语：</p><blockquote><p>A minimal 1D algorithm $F(m, r)$ is nested with itself to obtain a minimal 2D algorithm.</p><p>The nesting technique can be generalized for non-square filters and outputs,$F(m × n, r × s)$,<br>by nesting an algorithm for $F(m, r)$ with an algorithm for $F(n, s)$.</p></blockquote><p>文中给出的二维卷积形式化表述如下：<br>$$<br>Y=A^{T}\left[\left[G g G^{T}\right] \odot\left[B^{T} d B\right]\right] A<br>$$<br>详细解释如下：</p><ul><li>$g$：卷积核 ，维度$r\cdot r$</li><li>$d$：输入信号，维度$H\cdot H$</li><li>$G$：Filter transform矩阵，用于将卷积核变换到另一个空间，维度$(m+r-1)\cdot r=H \cdot r$</li><li>$B^T$：Input transform矩阵，用于将输入数据变换到另一个空间，维度$(m+r-1)\cdot (m+r-1)=H \cdot H$</li><li>$A^T$：Output transform矩阵，用于将数据转换回输出空间，维度$m\cdot (m+r-1)=m*H$</li><li>$Y$：卷积结果，维度$m\cdot m$</li></ul><p>对于$F(I_{2\cdot 2},K_{3 \cdot 3})$，其中所有矩阵中的参数，包括$G$，$B^T$，$A^T$都是和$F(I_2,K_3)$一样的。</p><p>依然只有$\odot$包含了乘法，乘法的次数为16次，相比于标准卷积的次数$36=2\times 2 \times 3 \times 3$，速度提升比例为<strong>2.25倍</strong>。其中Input transform包括$32=4\times 4 \times 2$次加法，Filter transform包括28次浮点数操作（预先计算），Output transform（Inverse transform）包括$24=2\times 2 \times 3 \times 2$次加法。</p><p>等等，怎么就<code>nested with itself</code>了，参数还是一样的？</p><p>那么问题来了：</p><ul><li>二维卷积的形式化表述是否正确，如何证明</li><li>通常输入的图像尺寸都较大，如何使用Winograd对其进行卷积计算，难道要实现$F(I_{448\cdot 448}, K_{3 \cdot 3})$吗，三维的卷积（卷积神经网络中的实际情况）该如何实现</li><li>上面形式化表示中所使用的矩阵参数该如何获得</li><li>形式化表示中的矩阵乘法看起来似乎比常规卷积做了更多的乘法操作，真正的算法实现是如何转换成加法的</li></ul><h4 id="二维卷积形式化推导"><a href="#二维卷积形式化推导" class="headerlink" title="二维卷积形式化推导"></a>二维卷积形式化推导</h4><p>我们先来解决第一个问题，要完成形式化的推导，我们需要先理解文章中的<code>nested with itself</code>到底是什么意思。下列图片来自ARM在Embedded Vision Summit 2018上的Slides，里面的符号表示会略有不同（ 用$k$来表示输入，$w$表示权重，$r$表示输出 ）。</p><p><img src="fig_arm_winograd_nest_0.png" alt></p><p>我们以$F(I_{2\cdot 2},K_{3 \cdot 3})$为例，输入图片是$4\times 4$的，输出是$2\times 2$的，卷积核如下：<br>$$<br>W = \left[\begin{array}{lll}{w_{0}} &amp; {w_{1}} &amp; {w_{2}} \\ {w_{3}} &amp; {w_{4}} &amp; {w_{5}} \\ {w_{6}} &amp; {w_{7}} &amp; {w_{8}}\end{array}\right]<br>$$<br>根据我们之前对标准卷积的运算次数推导，$FLO=(OH\cdot OW \cdot OC)\cdot (R\cdot R)\cdot C=36$，$OP=(OH\cdot OW \cdot OC)\cdot (R\cdot R\cdot C-1)=32$，即需要<strong>36次乘法和32次加法</strong>。</p><p>现在我们按照<strong>im2row</strong>的形式展开卷积流程，可以得到如下的矩阵运算：</p><p><img src="fig_arm_winograd_nest_1.png" alt></p><p>仔细观察可以发现，左侧矩阵中的部分元素是重复出现的，我们按照相同的颜色对其进行标记，并以此来进行矩阵和向量的分块操作：</p><p><img src="fig_arm_winograd_nest_2.png" alt>使用更加简洁的表述，我们得到了如下所示的分块运算，现在问题的表述和$F(I_2,K_3)$完全一致了，不同的是我们的每一对元素操作都是$F(I_2,K_3)$，这就是$F(I_{2\cdot 2},K_{3 \cdot 3})$的<strong>堆叠实现</strong>：</p><p><img src="fig_arm_winograd_nest_3.png" alt></p><p>形式化的表述如下：<br>$$<br>\begin{aligned} \left[\begin{array}{lll}{K_0} &amp; {K_1} &amp; {K_2} \\ {K_1} &amp; {K_2} &amp; {K_3} \end{array}\right] \left[\begin{array}{l}{W_0} \\ {W_1} \\ {W_2} \end{array}\right] &amp;= \left[\begin{array}{l}{R_0} \\ {R_1} \end{array}\right] = \left[\begin{array}{l}{K_0W_0+K_1W_1+K_2W_2} \\ {K_1W_0+K_2W_1+K_3W_2} \end{array}\right] \\ \\ &amp;= \left[\begin{array}{l}{F_{(2,3)}(D_0,W_0)+F_{(2,3)}(D_1,W_1)+F_{(2,3)}(D_2,W_2)} \\ {F_{(2,3)}(D_1,W_0)+F_{(2,3)}(D_2,W_1)+F_{(2,3)}(D_3,W_2)} \end{array}\right] \end{aligned}<br>$$<br>其中，$D_i$是$K_i$对应的输入序列，也即卷积输入的第$i$行:<br>$$<br>D = d^T=\left[\begin{array}{llll} {k_0} &amp; {k_4} &amp; {k_8} &amp; {k_{12}} \\ {k_1} &amp; {k_5} &amp; {k_9} &amp; {k_{13}} \\ {k_2} &amp; {k_6} &amp; {k_{10}} &amp; {k_{14}} \\ {k_3} &amp; {k_7} &amp; {k_{11}} &amp; {k_{15}} \end{array}\right] = \left[\begin{array}{l} D_0 &amp; D_1 &amp; D_2 &amp; D_3 \end{array}\right]<br>$$<br>我们一共使用6个$F(I_2,K_3)$来计算$F(I_{2\cdot 2},K_{3 \cdot 3})$，并额外增加了8次加法，之前提到$F(I_2,K_3)$一共所需的运算次数为4次乘法和8次加法，所以计算时期共计<strong>24次乘法与48​次加法</strong>， 速度提升比例为<strong>1.5倍</strong>。在卷积核预处理阶段，需要进行8次乘法和12次加法。</p><p>有兴趣的童鞋可以思考一下为什么是48次加法，因为数据有部分重复，数据变换（Input transform）只需要做4次，此处共计16次加法，而Output transform则是6次，共计24次加法，另外还有8次额外的加法（虽然只有4个加号却是8次）。</p><p>之前曾经提到，最小的乘法次数应该和输入的数据规模相等，因此这还不是最高的加速比（最高应该是<strong>$2.25=36\div 16$倍</strong>），还记得我们之前的一维卷积形式化表述吗，下面的图片中的所有表述和$F(I_2,K_3)$是完全一致的，但是每个元素都用矩阵和向量替换了：</p><p><img src="fig_arm_winograd_nest_4.png" alt></p><p>按照这种方式，我们可以得到$F(I_{2\cdot 2},K_{3 \cdot 3})$的<strong>嵌套实现</strong>，形式化的表述如下：<br>$$<br>\begin{aligned} \left[ \begin{array}{c}{R_0} \\ {R_1}\end{array}\right] &amp;= \left[ \begin{array}{c}{K_0 W_0 + K_1 W_1 + K_2 W_2} \\ {K_1 W_0 + K_2 W_1 + K_3 W_2} \end{array} \right] \\ \\ &amp;= \left[\begin{array}{l}{F_{(2,3)}(D_0,W_0)+F_{(2,3)}(D_1,W_1)+F_{(2,3)}(D_2,W_2)} \\ {F_{(2,3)}(D_1,W_0)+F_{(2,3)}(D_2,W_1)+F_{(2,3)}(D_3,W_2)} \end{array}\right] \\ &amp;= \left[ \begin{array}{c} {A^{T}\left[(G W_0) \odot\left(B^{T} D_0 \right)\right] + A^{T}\left[(G W_1) \odot\left(B^{T} D_1 \right)\right] + A^{T}\left[(G W_2) \odot\left(B^{T} D_2 \right)\right]} \\ {A^{T}\left[(G W_0) \odot\left(B^{T} D_1 \right)\right] + A^{T}\left[(G W_1) \odot\left(B^{T} D_2 \right)\right] + A^{T}\left[(G W_2) \odot\left(B^{T} D_3 \right)\right]} \end{array} \right] \\ \\ &amp;=A^{T}\left[\left[G [W_0 \ W_1 \ W_2 ] G^{T}\right] \odot\left[B^{T} [D_0 \ D_1 \ D_2 \ D_3] B\right]\right]A \\ \\ &amp;=A^{T}\left[\left[G w G^{T}\right] \odot\left[B^{T} d B\right]\right] A \\ \\ &amp;\textit{(…w =&gt; g…)} \\ \\ &amp;=A^{T}\left[\left[G g G^{T}\right] \odot\left[B^{T} d B\right]\right] A \end{aligned}<br>$$<br>中间的一步变化很关键，$\left[(G W_i) \odot\left(B^{T} D_j \right)\right]$是一个长度为4的列向量,$A^{T}\left[(G W_i) \odot\left(B^{T} D_j \right)\right]$则是一个长度为2的列向量，$A^{T}\left[(G W_0) \odot\left(B^{T} D_0 \right)+ (G W_1) \odot\left(B^{T} D_1 \right) + (G W_2) \odot\left(B^{T} D_2 \right)\right]$ 方括号内对应位置相乘再相加，相当于在每组相点乘结果构成的行向量上做卷积。最后的结果是一个长度为2的列向量。</p><p>实际上两种表述的维度并不相同，前者的维度是$I_{4\cdot 1}$，后者是$I_{2\cdot 2}$。</p><p>此处的推导过于复杂，作者并不会，有兴趣的童鞋可以去试一下这段代码，其作用是代入$F(I_{2\cdot 2},K_{3 \cdot 3})$的参数和符号，进行两种表达的展开，最后证明相等:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sympy <span class="token keyword">import</span> Symbol<span class="token punctuation">,</span> Matrix<span class="token punctuation">,</span>pprint<span class="token punctuation">,</span>simplify<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npBT <span class="token operator">=</span> Matrix<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>G <span class="token operator">=</span> Matrix<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>G<span class="token operator">=</span>G<span class="token operator">/</span><span class="token number">2</span>AT <span class="token operator">=</span> Matrix<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>g <span class="token operator">=</span> Matrix<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">(</span>f<span class="token string">'g{i}'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> Matrix<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">(</span>f<span class="token string">'d{i}'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m <span class="token operator">=</span> Matrix<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">(</span>f<span class="token string">'m{i}'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'GgGT:'</span><span class="token punctuation">)</span>GgGT<span class="token operator">=</span>G<span class="token operator">*</span>g<span class="token operator">*</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>T<span class="token punctuation">)</span>pprint<span class="token punctuation">(</span>GgGT<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'BTdB'</span><span class="token punctuation">)</span>BTdB<span class="token operator">=</span>BT<span class="token operator">*</span>d<span class="token operator">*</span><span class="token punctuation">(</span>BT<span class="token punctuation">.</span>T<span class="token punctuation">)</span>pprint<span class="token punctuation">(</span>BTdB<span class="token punctuation">)</span>RET1<span class="token operator">=</span><span class="token punctuation">(</span>AT<span class="token operator">*</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>GgGT<span class="token punctuation">,</span>BTdB<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>AT<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'AT * [GgGT em BTdB] * A ,shape={shape},first:'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>shape<span class="token operator">=</span>RET1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>pprint<span class="token punctuation">(</span>simplify<span class="token punctuation">(</span>RET1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>R0<span class="token operator">=</span><span class="token punctuation">(</span>AT<span class="token operator">*</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>G<span class="token operator">*</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span>BT<span class="token operator">*</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token operator">+</span>AT<span class="token operator">*</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>G<span class="token operator">*</span>g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span>BT<span class="token operator">*</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token operator">+</span>AT<span class="token operator">*</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>G<span class="token operator">*</span>g<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span>BT<span class="token operator">*</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>R1<span class="token operator">=</span><span class="token punctuation">(</span>AT<span class="token operator">*</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>G<span class="token operator">*</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span>BT<span class="token operator">*</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token operator">+</span>AT<span class="token operator">*</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>G<span class="token operator">*</span>g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span>BT<span class="token operator">*</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token operator">+</span>AT<span class="token operator">*</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>G<span class="token operator">*</span>g<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span>BT<span class="token operator">*</span>d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'R0 ,shape={shape},first:'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>shape<span class="token operator">=</span>R0<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>pprint<span class="token punctuation">(</span>simplify<span class="token punctuation">(</span>R0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Diff of first:'</span><span class="token punctuation">)</span>pprint<span class="token punctuation">(</span>simplify<span class="token punctuation">(</span>RET1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>R0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Diff of all:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>simplify<span class="token punctuation">(</span>RET1<span class="token operator">-</span>np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>R0<span class="token punctuation">.</span>T<span class="token punctuation">,</span>R1<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过这样一番推导（虽然最关键的一步跳过了，嘻嘻嘻）我们就可以得到$F(I_{2\cdot 2},K_{3 \cdot 3})$的<strong>嵌套实现</strong>，<br>$$<br>F(I_{2\cdot 2},K_{3 \cdot 3})= A^{T} \left[ U \odot V \right] A<br>$$</p><p>其中，$U = G g G^{T},V = B^{T} d B$，一共需要 <strong>16次乘法和56次加法</strong>（$V = B^{T} d B$过程32次加法、$M=U \odot V$过程16次乘法、$Y=A^TMA$过程24次加法）。和一维卷积类似的，所需要的存储空间也相应的增加，由原来的$r\cdot r$增加为$H\cdot W$，即从卷积核大小变成了输入数据的宽度。</p><h4 id="扩展到-F-I-4-cdot-4-K-3-cdot-3"><a href="#扩展到-F-I-4-cdot-4-K-3-cdot-3" class="headerlink" title="扩展到$F(I_{4\cdot 4},K_{3 \cdot 3})$"></a>扩展到$F(I_{4\cdot 4},K_{3 \cdot 3})$</h4><p>算法本身可以被扩展到更大的输入输出尺寸，从而可能得到更高的加速比，但是参数数量和加法操作次数也相应的大大增加。<br>要计算$F(I_{4\cdot 4},K_{3 \cdot 3})$，我们的输入是$6\times 6$的图片，常规卷积的操作需要计算$144=4\times 4\times 3\times3$次乘法，但是使用Winograd只需要$36=6\times 6$次乘法，速度提升比例为<strong>4倍</strong>。具体参数如下：<br>$$<br>B^{T}=\left[\begin{array}{rrrrrr}{4} &amp; {0} &amp; {-5} &amp; {0} &amp; {1} &amp; {0} \\ {0} &amp; {-4} &amp; {-4} &amp; {1} &amp; {1} &amp; {0} \\ {0} &amp; {4} &amp; {-4} &amp; {-1} &amp; {1} &amp; {0} \\ {0} &amp; {-2} &amp; {-1} &amp; {2} &amp; {1} &amp; {0} \\ {0} &amp; {2} &amp; {-1} &amp; {-2} &amp; {1} &amp; {0} \\ {0} &amp; {4} &amp; {0} &amp; {-5} &amp; {0} &amp; {1}\end{array}\right]<br>$$<br>$$<br>G=\left[\begin{array}{rrr}{\frac{1}{4}} &amp; {0} &amp; {0} \\ {-\frac{1}{6}} &amp; {-\frac{1}{6}} &amp; {-\frac{1}{6}} \\ {-\frac{1}{6}} &amp; {\frac{1}{6}} &amp; {-\frac{1}{6}} \\ {\frac{1}{24}} &amp; {\frac{1}{12}} &amp; {\frac{1}{6}} \\ {\frac{1}{24}} &amp; {-\frac{1}{12}} &amp; {\frac{1}{6}} \\ {0} &amp; {0} &amp; {1}\end{array}\right]<br>$$<br>$$<br>A^{T}=\left[\begin{array}{rrrrrr}{1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} &amp; {0} \\ {0} &amp; {1} &amp; {-1} &amp; {2} &amp; {-2} &amp; {0} \\ {0} &amp; {1} &amp; {1} &amp; {4} &amp; {4} &amp; {0} \\ {0} &amp; {1} &amp; {-1} &amp; {8} &amp; {-8} &amp; {1}\end{array}\right]<br>$$</p><blockquote><p>The number of additions and constant multiplications required by the minimal Winograd transforms increases quadratically with the tile size. Thus for large tiles, the complexity of the transforms will overwhelm any savings in the number of multiplications.</p><p>The magnitude of the transform matrix elements also increases with increasing tile size. This effectively reduces the numeric accuracy of the computation, so that for large tiles, the transforms cannot be computed accurately.</p></blockquote><p>但是浮点操作次数也大大增加了，其中Input transform包括$144=12\times (6+6)$次浮点数操作（注意此时的系数已经不全是1了，因此也会包括乘法），Filter transform包括$72=8\times (3+6)$次浮点数操作（预先计算），Output transform（Inverse transform）包括$100=10\times (6+4)$次浮点数操作。</p><p>此外，转换矩阵的规模增大导致了计算精度误差增加，不过作者认为卷积神经网络对精度的要求其实比较低，因此在附录中讨论了$F(I_{6\cdot 6},K_{3 \cdot 3})$的可能性，其参数如下：<br>$$<br>B^{T}=\left[\begin{array}{rrrrrrrr}   {1} &amp; {0} &amp; {-21/4} &amp; {0} &amp; {21/4} &amp; {0} &amp; {-1} &amp; {0} \\   {0} &amp; {1} &amp; {1} &amp; {-17/4} &amp; {-17/4} &amp; {1} &amp; {1} &amp; {0} \\   {0} &amp; {-1} &amp; {1} &amp; {17/4} &amp; {-17/4} &amp; {-1} &amp; {1} &amp; {0} \\   {0} &amp; {1/2} &amp; {1/4} &amp; {-5/2} &amp; {-5/4} &amp; {2} &amp; {1} &amp; {0} \\   {0} &amp; {-1/2} &amp; {1/4} &amp; {5/2} &amp; {-5/4} &amp; {-2} &amp; {1} &amp; {0} \\   {0} &amp; {2} &amp; {4} &amp; {-5/2} &amp; {-5} &amp; {1/2} &amp; {1} &amp; {0} \\   {0} &amp; {-2} &amp; {4} &amp; {5/2} &amp; {-5} &amp; {-1/2} &amp; {1} &amp; {0} \\   {0} &amp; {-1} &amp; {0} &amp; {21/4} &amp; {0} &amp; {-21/4} &amp; {0} &amp; {1}   \end{array}\right],   \\   G=\left[\begin{array}{rrr}   {1} &amp; {0} &amp; {0} \\   {-2/9} &amp; {-2/9} &amp; {-2/9} \\   {-2/9} &amp; {2/9} &amp; {-2/9} \\   {1/90} &amp; {1/45} &amp; {2/45} \\   {1/90} &amp; {-1/45} &amp; {2/45} \\   {32/45} &amp; {16/45} &amp; {8/45} \\   {32/45} &amp; {-16/45} &amp; {8/45} \\   {0} &amp; {0} &amp; {1}   \end{array}\right],   \\   A^{T}=\left[\begin{array}{rrrrrrrr}   {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} &amp; {0} \\   {0} &amp; {1} &amp; {-1} &amp; {2} &amp; {-2} &amp; {1/2} &amp; {-1/2} &amp; {0} \\   {0} &amp; {1} &amp; {1} &amp; {4} &amp; {4} &amp; {1/4} &amp; {1/4} &amp; {0} \\   {0} &amp; {1} &amp; {-1} &amp; {8} &amp; {-8} &amp; {1/8} &amp; {-1/8} &amp; {0} \\   {0} &amp; {1} &amp; {1} &amp; {16} &amp; {16} &amp; {1/16} &amp; {1/16} &amp; {0} \\   {0} &amp; {1} &amp; {-1} &amp; {32} &amp; {-32} &amp; {1/32} &amp; {-1/32} &amp; {1} \\   \end{array}\right]<br>$$<br>相比直接卷积324次的乘法操作，$F(I_{6\cdot 6},K_{3 \cdot 3})$只需要64次，加速比达到<strong>5.06倍</strong>（然而并没有，实际有3就很不错了）。我们目前讨论的都是$3\times 3$的卷积，只是<code>tile</code>大小不同。</p><h3 id="基于Winograd的卷积计算算法流程"><a href="#基于Winograd的卷积计算算法流程" class="headerlink" title="基于Winograd的卷积计算算法流程"></a>基于Winograd的卷积计算算法流程</h3><p>第二个问题，其实我们并不会真的去实现$F(I_{448\cdot 448}, K_{3 \cdot 3})$，而是将图片划分成多个相同大小部分重叠的<code>tile</code>，在此基础上使用如$F(I_{2\cdot 2},K_{3 \cdot 3})$的方式来计算，最后合并统计结果。对于三维卷积，实际上是和标准卷积一样，逐层做二维卷积，再每层对应位置结果相加。但除此之外，针对多个卷积核还有更加巧妙的做法。</p><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><p><code>tile</code>在此处代表一个图像块，具体划分方式如下：</p><ul><li>每个<code>tile</code>的大小为$H\times H=(m+r-1)(m+r-1)$</li><li>每个<code>tile</code>互相重叠的长度为$r-1$</li><li>每个通道可以划分成$P=\lceil H / m\rceil\lceil W / m\rceil $个<code>tile</code>，注意此处的$H$表示的是通道的大小，和之前的不同，之后的算法表述也会出现类似的情况</li></ul><p>之所以有部分重叠，是因为我们的卷积结果其实小于原图的大小，而每一边减小的大小就是$r-1$。</p><p>下图展示了标准卷积和Winograd $F(I_{2\cdot 2},K_{3 \cdot 3})$的区别,标准的卷积过程：</p><p><img src="fig_standard_conv.gif" alt></p><p>Winograd $F(I_{2\cdot 2},K_{3 \cdot 3})$:</p><p><img src="fig_winograd_conv.gif" alt></p><p>之前提到，计算公式如下所示：<br>$$<br>F(I_{m\cdot m},K_{r \cdot r})= A^{T} \left[ U \odot V \right] A \\U = G g G^{T}\\V = B^{T} d B<br>$$</p><ol><li>Winograd的输入为固定大小，因此需要先对图像做Padding，每个<code>tile</code>的步长即为非重叠的长度$m$</li><li>$U$已经提前计算好，$V$每个<code>tile</code>计算一次</li><li>最后输出的图像部分是不需要的，需要做裁剪，裁剪宽度和Padding宽度相同</li></ol><blockquote><p>前述只讨论了一些比较简单的情况，事实上在CNN中，由于输入的特征图只需要变换一次，而却会被多个滤波器复用，所以输入变换过程的额外开销会被平摊——卷积的滤波器（也即输出通道）越多，那么输入变换产生的额外开销的影响就越小。 </p></blockquote><h4 id="多通道多卷积核"><a href="#多通道多卷积核" class="headerlink" title="多通道多卷积核"></a>多通道多卷积核</h4><p>在图片$i$，通道$c$，卷积核$k$上做标准卷积可以用如下的形式表示：<br>$$<br>{Y_{i, k, x, y}=\sum_{c=1}^{C} \sum_{v=1}^{R} \sum_{u=1}^{S} D_{i, c, x+u, y+v} G_{k, c, u, v}}<br>$$</p><p>我们可以使用星号来表示2D互相关的过程，<br>$$<br>Y_{i, k}=\sum_{c=1}^{C} D_{i, c} * G_{k, c}<br>$$</p><p>我们使用$(\tilde{x}, \tilde{y})$来表示<code>tile</code>的坐标，则Winograd卷积可以被表示成如下形式：<br>$$<br>{\qquad \begin{aligned} Y_{i, k, \widetilde{x}, \widetilde{y}} &amp;=\sum_{c=1}^{C} D_{i, c, \widetilde{x}, \widetilde{y}} * G_{k, c} \\ &amp;=\sum_{c=1}^{C} A^{T}\left[U_{k, c} \odot V_{c, i, \widetilde{x}, \bar{y}}\right] A \\ &amp;=A^{T}\left[\sum_{c=1}^{C} U_{k, c} \odot V_{c, i, \widetilde{x}, \widetilde{y}}\right] A \end{aligned}}<br>$$<br>因此，我们可以在变换的空间就对通道的那个维度求和，不需要等到输出变换（Inverse Transform）。<br>$$<br>M_{k, i, \widetilde{x}, \widetilde{y}}=\sum_{c=1}^{C} U_{k, c} \odot V_{c, i, \widetilde{x}, \widetilde{y}}<br>$$<br>按照图像/<code>tile</code>坐标$(i,\tilde{x}, \tilde{y})$的方式将数据全部展开至一个维度，我们可以将之前的遍历操作转换得到如下的矩阵乘法表示，其中$(\xi, \nu)$遍历的是每个<code>tile</code>大小的区域，表示一个逐点相乘的操作：<br>$$<br>M_{k, b}^{(\xi, \nu)}=\sum_{c=1}^{C} U_{k, c}^{(\xi, \nu)} V_{c, b}^{(\xi, \nu)}<br>$$<br>该表述实际上就是矩阵乘法，在下文的图中可以跟清晰的看出来，现在计算过程的表述如下，整个过程一共要重复<code>tile</code>大小的次数：<br>$$<br>M^{(\xi, \nu)}=U^{(\xi, \nu)} V^{(\xi, \nu)}<br>$$<br>综上，文章中描述的算法流程如下所示，其中的$K$表示卷积核的数量，也是输出的特征图的深度（变换以后的，真实的卷积核有$K\times C$个），$C$表示图片通道数，$P$代表<code>tile</code>的个数：</p><p><img src="fig_algorithm_1.png" alt></p><p>在文章《 <a href="https://www.researchgate.net/publication/328091476_Sparse_Winograd_Convolutional_neural_networks_on_small-scale_systolic_arrays/figures" target="_blank" rel="noopener">Sparse Winograd Convolutional neural networks on small-scale systolic arrays</a> 》中描述了多通道多卷积核的Winograd计算流程，和单通道不同的是，此处我们依然是使用GEMM来计算整个卷积过程，因此针对im2col中GEMM部分的优化在此处依然适用。最后我们是从所有的卷积结果里面拿出了一个<code>tile</code>应有的输出。</p><p>算法整体依然分为四步：</p><ol><li>Filter Transform</li><li>Input transform</li><li>Hadamard product $-&gt;$ Batched-GEMM（批量矩阵乘法）</li><li>Output transform</li></ol><p><img src="fig_winograd_overview.ppm" alt></p><p>Winograd中和矩阵乘法不同的地方主要是有一个元素级乘法（EWMM）的操作，而在这种使用GEMM表示的计算流程中，巧妙的将多通道和多卷积核使用矩阵表示，参与GEMM操作的矩阵尺寸分别为$\lceil H / m\rceil\lceil W / m\rceil \times C$和$C \times K$，一共做了$(m+r-1)^2=H\times W$个矩阵乘法操作（此处为Winograd输入大小，和图像大小不同），通道的那个维度在矩阵乘法中就被消掉了。而元素级乘法（EWMM）的操作实际上就在$(m+r-1)^2=H\times W$那么多个矩阵乘法操作中进行。无论是单个GEMM操作内部，还是多个GEMM操作都可以使用GEMM的并行技巧。</p><h3 id="参数推导（劝退节）-TODO"><a href="#参数推导（劝退节）-TODO" class="headerlink" title="参数推导（劝退节）-TODO"></a>参数推导（劝退节）-TODO</h3><p>当你在凝视深渊的时，Winograd也在凝视着你。</p><blockquote><p>Shmuel Winograd, 1936年生，MIT本硕（1959年）+纽约大学博士（1968年）。此后一直在IBM当研究员，直到退休。IEEE Fellow，ACM Fellow，美国科学院院士。</p></blockquote><p><img src="fig_winograd_author.jpg" alt></p><h4 id="欧几里得定理（辗转相除法）"><a href="#欧几里得定理（辗转相除法）" class="headerlink" title="欧几里得定理（辗转相除法）"></a>欧几里得定理（辗转相除法）</h4><p>欧几里得定理（ Euclidean algorithm ），又名辗转相除法，用来快速求两个数的最大公约数（ Greatest Common Divisor ）。</p><p>定义：$GCD(a,b)=GCD(b,a\% b)$</p><p>证明：</p><ol><li>若$a&lt;b$ ，则计算一次后两者交换</li><li>$a=k\times b+r\quad r=a\%b $<ul><li>若$d$为$a,b$的公约数，则$a \% d=0,b\%d=0$，则$(a-k\times b)\%d=r\%d=0$，故$d$也是$r$的公约数，故$GCD(a,b)$和$GCD(b,r)$相等（为了便于迭代我们都把小的数写在右边）。</li><li>当$b=0$时，$GCD(a,b)=a$</li><li>故只需要迭代上述过程至右侧数为0即可</li></ul></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a，<span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>顺便附上求最小公倍数的方法：$LCM(a,b)=a\div GCD(a,b) \times b$</p><h4 id="裴蜀定理（贝祖定理）"><a href="#裴蜀定理（贝祖定理）" class="headerlink" title="裴蜀定理（贝祖定理）"></a>裴蜀定理（贝祖定理）</h4><p>裴蜀定理（贝祖定理，Bézout’s identity ）得名于法国数学家艾蒂安·裴蜀。又称为贝祖定理和贝祖等式。</p><p>在数论中，裴蜀定理是一个关于最大公约数的定理，具体而言是一个关于未知数 x 和 y 的线性丢番图方程。</p><blockquote><p>丢番图方程（Diophantine Equation）：有一个或者几个变量的整系数方程，它们的求解仅仅在整数范围内进行。</p></blockquote><p>定义：若$a$，$b$是整数，则存在整数$x$，$y$使得$ax+by=GCD(a,b)$,且$GCD(a,b)$是$ax+by$集合中的<strong>最小正整数</strong>（若$a\ne 0$ 或 $b\ne 0$）。</p><p>表述2：若$a$，$b$是整数，$ax+by=c$有整数解的充要条件是$c\%GCD(a,b)=0$。</p><p>推论：$GCD(a,b)=1$的充要条件是存在整数解使$ax+by=1$。</p><p>该定理也可以推广到多个数的情况。这个定理仔细想想会觉得非常有道理，因为$abs(a-b)=k\times GCD(a,b)$必然成立，我们不可能组合出更小的数了，实在是找不到反例，但是证明比较复杂，就先跳过吧。</p><h4 id="扩展欧几里得定理"><a href="#扩展欧几里得定理" class="headerlink" title="扩展欧几里得定理"></a>扩展欧几里得定理</h4><p>扩展欧几里得定理（Extended Euclidean algorithm）可以用来求上述定理表述2中的整数$x$，$y$。</p><p>我们已经知道有解的充要条件，在该条件满足的情况下，我们只需要求$ax+by=GCD(a,b)$的解即可。</p><p>首先，我们考虑边界情况 ，当$b=0$时，原方程变为$ax=GCD(a,0)$，则<br>$$<br>\begin{cases} x=1\\ y=0 \end{cases}\tag{1}<br>$$</p><p>这个边界条件就是算法的终止条件，现在，根据欧几里得定理，$GCD(a,b)=GCD(b,a\% b)$，</p><p>我们设$a’=b,b’=a \% b$，则$a′x′+b′y′=GCD(a′,b′)=GCD(b,a \% b)=GCD(a,b)$，</p><p>交换一下符号，</p><p>$$ax+by=a′x′+b′y′=bx′+(a\%b)y′=bx′+(a−\lfloor\frac{a}{b}\rfloor b)y′=GCD(a,b)$$</p><p>整理可得：<br>$$<br>ax+by=ay′+b(x′−\lfloor\frac{a}{b}\rfloor y′)<br>$$<br>对比系数，可得：<br>$$<br>\begin{cases} x=y’ \\ y=x’−\lfloor\frac{a}{b}\rfloor y′ \end{cases}\tag{2}<br>$$<br>这里是说$x′,y′$分别是$a’,b’$对应的解，更新以后我们得到了更上一层的解，对比更新和终点这两个式子，我们就可以得到方程$ax+by=GCD(a,b)$的迭代解法，先递归到最后一层，再逐层往回迭代：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//r is GCD(a,b)</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token operator">%</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> x<span class="token punctuation">;</span> x <span class="token operator">=</span> y<span class="token punctuation">;</span> y <span class="token operator">=</span> t <span class="token operator">-</span> a<span class="token operator">/</span>b<span class="token operator">*</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h4><p> 中国剩余定理/中国同余定理（Chinese Remainder Theorem） 来源于《孙子算经》 ，是数论的重要内容 。</p><blockquote><p>今有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二，问物几何？<br>答曰：二十三。<br>术曰：三三数之剩二，置一百四十；五五数之剩三，置六十三，七七数之剩二，置三十，并之。得二百三十三，以二百一十减之，即得。凡三三数之剩一，则置七十；五五数之剩一，则置二十一；七七数之剩一，则置十五；一百六以上以一百五减之即得。 </p></blockquote><p>使用数学语言描述如下：$x \equiv a(mod\ m)$成为两个数模$m$同余，若$a&lt;m$，则可以认为$x\%m=a $</p><blockquote><p>问题：已知同余方程组<br>$$<br>\begin{cases} x \equiv 2(mod\ 3) \\ x \equiv 3(mod\ 5) \\ x \equiv 2(mod\ 7) \end{cases}<br>$$<br>求满足条件的$x$</p></blockquote><p>求解：假设$m_1, m_2, …, m_n$两两互质，则对于任意整数$a_1, a_2, …, a_n$，同余方程组<br>$$<br>\begin{cases} x \equiv a_1(mod\ m_1) \\ x \equiv a_2(mod\ m_2) \\ … \\ x \equiv a_n(mod\ m_n) \end{cases}<br>$$<br>存在整数解，且解$X,Y$必满足$X \equiv Y (mod\ N)$，其中$N=\prod^n_{i=1}m_i$。</p><p>令$N_i=\frac{N}{m_i}$，$t_i$是方程$N_it_i\equiv 1 (\mod m_i)$的解，则$x$满足$ x \equiv \sum^n_{i=1} a_i N_i t_i  (mod\ N) $。</p><p>证明：</p><p>对$\forall k \neq i$有$a_iN_it_i\equiv 0(\mod m_k)$，$a_iN_it_i\equiv a_i (\mod m_i)$，可以认为$a_iN_it_i$只对方程$i$有贡献，对其他方程没有影响。</p><p>具体解法：$t_i$可以通过扩展欧几里得来求解。我们构造如下贝组等式：</p><p>$N_it_i+m_iy=1$，显然$N_i$和$m_i$必然互质，则我们构造了形如$ax+by=GCD(a,b)$的方程，可以用扩欧来求解了。</p><p>顺带一提，此处的$t_i$其实就是$N_i$的模$m_i$乘法逆元。模逆元也叫模反元素，通常在算法中可以用来计算模数下的大数除法。详情参见维基百科<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">模反元素</a>。</p><h4 id="扩展中国剩余定理"><a href="#扩展中国剩余定理" class="headerlink" title="扩展中国剩余定理"></a>扩展中国剩余定理</h4><p>实际上并不存在这个定理，这个问题是CRT针对扩展欧几里得的构造扩展问题。</p><p>若$m_1, m_2, …, m_n$不满足两两互质，则针对不互质的两个数，可以将<br>$$<br>\begin{cases} x \equiv a_1(mod\ m_1) \\ x \equiv a_2(mod\ m_2) \\\end{cases}<br>$$<br>变形为<br>$$<br>\begin{cases} x =a_1+m_1y_1 \\ x =a_2+m_2y_2 \\\end{cases}<br>$$<br>即$m_1y_1-m_2y_2=a_2-a_1$，这是个形如扩展欧几里得的式子，如果无解（根据裴蜀定理判断），则原方程组无解，否则可构造一个可行解$x\equiv x_1 (\mod m)$，其中$m=LCM(m_1,m_2)$。</p><p>原方程组则等价于$x\equiv x_1 (\mod m)$，这样就消去了一个方程，和剩下的方程联立直到满足$m_1, m_2, …, m_n$满足两两互质即可。</p><h4 id="多项式概念扩展"><a href="#多项式概念扩展" class="headerlink" title="多项式概念扩展"></a>多项式概念扩展</h4><p>可以将整数的欧几里得除法定义扩展到多项式，用长除法来表示：<br>$$<br>\begin{align} \frac{x^4 + x^3 - x^2 + 3x + 2}{x^3 + 3x^2 + 3x + 2} &amp;= \frac{-2x^3 - 4x^2 + x + 2}{x^3 + 3x^2 + 3x + 2} + (x) \\ &amp;= \frac{2x^2 + 7x + 6}{x^3 + 3x^2 + 3x + 2} + (x-2) \end{align}<br>$$<br>$q(x)$为除数，$r(x)$为余数， 长除法除到最后余数的最高次幂小于除数的最高次幂即可。<br>$$<br>{x^4 + x^3 - x^2 + 3x + 2} = (x-2)\,\underbrace{(x^3 + 3x^2 + 3x + 2)}_{q(x)}  +\underbrace{(2x^2 + 7x + 6)}_{r(x)}<br>$$<br>可以按照同样的方式来定义GCD：<br>$$<br>x^2 + 7x + 6 = (x + 1)(x + 6)\<br>x^2 − 5x − 6 = (x + 1)(x − 6)<br>$$<br>则两多项式的GCD为$(x+1)$，此时的互质是说两个多项式除零次多项式（常数）外不再有其他的公因式 。</p><p>类似的，贝祖定理、扩展欧几里得定理，中国剩余定理的解$ x \equiv \sum^n_{i=1} a_i N_i t_i  (mod\ N) $也可以被扩展到多项式：<br>$$<br>CRT(x)\equiv \left(\sum_{i=0}^na^{(i)}(x)N^{(i)}(x)t^{(i)}(x)\right)(mod\ {N(x)})<br>$$<br>在多项式中有一个<strong>度（degree）</strong>的概念，即多项式中包含的最高次项的次数。</p><h4 id="卷积与多项式乘法"><a href="#卷积与多项式乘法" class="headerlink" title="卷积与多项式乘法"></a>卷积与多项式乘法</h4><h4 id="拉格朗日多项式插值法"><a href="#拉格朗日多项式插值法" class="headerlink" title="拉格朗日多项式插值法"></a>拉格朗日多项式插值法</h4><h4 id="Cook-Toom-Algorithm"><a href="#Cook-Toom-Algorithm" class="headerlink" title="Cook-Toom Algorithm"></a>Cook-Toom Algorithm</h4><h4 id="Winograd-Algorithm-for-F-I-2-cdot-2-K-3-cdot-3"><a href="#Winograd-Algorithm-for-F-I-2-cdot-2-K-3-cdot-3" class="headerlink" title="Winograd Algorithm for $F(I_{2\cdot 2},K_{3 \cdot 3})$"></a>Winograd Algorithm for $F(I_{2\cdot 2},K_{3 \cdot 3})$</h4><h4 id="Winograd-Algorithm-for-F-I-4-cdot-4-K-3-cdot-3"><a href="#Winograd-Algorithm-for-F-I-4-cdot-4-K-3-cdot-3" class="headerlink" title="Winograd Algorithm for $F(I_{4\cdot 4},K_{3 \cdot 3})$"></a>Winograd Algorithm for $F(I_{4\cdot 4},K_{3 \cdot 3})$</h4><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="总流程"><a href="#总流程" class="headerlink" title="总流程"></a>总流程</h4><p>我们计算的总流程可以用下图（来源：2019 GMTC 全球大前端技术大会，阿里MNN组）表示，其中所有矩阵中的参数都是提前计算好的，在我们拿到卷积核的参数时可以先对其进行预处理，针对数据的变换和输出的变换则实时计算：</p><p><img src="fig_winograd_implementation_overview.png" alt></p><h4 id="计算优化"><a href="#计算优化" class="headerlink" title="计算优化"></a>计算优化</h4><p>在扩展到$F(I_{4\cdot 4},K_{3 \cdot 3})$时，我们并没有给出具体的计算方式，只给了矩阵的参数。和$F(I_{2\cdot 2},K_{3 \cdot 3})$类似的，其中很多计算都可以被复用。我们观察矩阵，给相关联的元素标上色：</p><p><img src="fig_winograd_f43_matrix.jpg" alt></p><p>括号中代表了所需的最少加法次数和乘法次数。原文中的表述是Floating Point Instruction，猜测是代表乘加指令，即$a \leftarrow a+b \times c$表示一个指令。</p><p>Input transform（12I，6M12A）:<br>$$<br>\begin{align} d’_0 &amp;= 4d_0 - 5d_2 + d_4 \\ d’_1 &amp;= -(4d_1 - d_3) - (4d_2 - d_4) \\ d’_2 &amp;= (4d_1 - d_3) - (4d_2 - d_4) \\ d’_3 &amp;= -2(d_1 - d_3) - (d_2 - d_4) \\ d’_4 &amp;= 2(d_1 - d_3) - (d_2 - d_4) \\ d’_5 &amp;= 4d_1 - 5d_3 + d_5 \end{align}<br>$$</p><p>Filter transform（8I，6M6A2S）:<br>$$<br>\begin{align} g’_0 &amp;= \frac{1}{4}g_0 \\ g’_1 &amp;= -\frac{1}{6}(g_0 + g_2) - \frac{1}{6}g_1 \\ g’_2 &amp;= -\frac{1}{6}(g_0 + g_2) + \frac{1}{6}g_1 \\ g’_3 &amp;= (\frac{1}{24}g_0 + \frac{1}{6}g_2) + \frac{1}{12}g_1 \\ g’_4 &amp;= (\frac{1}{24}g_0 + \frac{1}{6}g_2) - \frac{1}{12}g_1 \\ g’_5 &amp;= g_2 \end{align}<br>$$<br>EWMM（6M0A）:<br>$$<br>m_i=d’_ig’_i<br>$$<br>Output transform（10I，3M10A）:<br>$$<br>\begin{align} y_0 &amp;= (m_1 + m_2) + (m_3 + m_4) + m_0  \\ y_1 &amp;= (m_1 - m_2) + 2(m_3 - m_4) \\ y_2 &amp;= (m_1 + m_2) + 4(m_3 + m_4) \\ y_3 &amp;= (m_1 - m_2) + 8(m_3 - m_4) + m_5 \end{align}<br>$$<br>扩展到二维，其中Input transform（$B^TdB$）包括$144=12\times (6+6)$次浮点数操作（包括乘法），Filter transform（$GgG^T$）包括$72=8\times (3+6)$次浮点数操作（预先计算），Output transform（$A^TMA$）（Inverse transform）包括$100=10\times (6+4)$次浮点数操作。其中括号里面的数表示了变换矩阵的两个维度。</p><h4 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h4><p>Winograd算法的点乘复杂度如下，其中假设了输入输出的大小一致，均为$ H \times W $，输入通道数为$C$、卷积核组数/输出通道数为$K$，批大小为$N$：<br>$$<br>X=N\lceil H / m\rceil\lceil W / n\rceil C K(m+R-1)(n+S-1)<br>$$<br>当<code>tile</code>大小为$1\times 1$时，可以看出Winograd与普通卷积无异，即与标准的im2col做法没有区别。</p><p>简明起见，我们假设图像尺寸是<code>tile</code>大小的整数倍，并且卷积核和<code>tile</code>都是正方形。</p><p>我们使用$\alpha,\beta,\gamma,\delta$来分别表示点乘的乘法复杂度、输入变换（Data）、权重变换（Filter）、输出变换（Inverse）的运算复杂度，</p><p>则点乘的乘法复杂度为：<br>$$<br>\begin{align} X &amp;= \frac{\alpha}{m^2} NHWCK \\   &amp;= \alpha’ NHWCK \end{align}<br>$$<br>变换过程（Data、Filter、Inverse）的运算复杂度为：<br>$$<br>\begin{align} T(D) &amp;= \frac{\beta}{m^2} NHWC \\ T(F) &amp;= \gamma CK \\ T(I) &amp;= \frac{\delta}{m^2} NHWK \end{align}<br>$$<br>将以上数值都进行归一化，保持和$X$一致的量纲，可以得到整个卷积过程的算法复杂度如下：<br>$$<br>\begin{align} L &amp;=X+T(D)+T(F)+T(I)\\&amp;= (1 + \frac{T(D)}{X} + \frac{T(F)}{X} + \frac{T(I)}{X}) X \\   &amp;= (1 + \frac{\beta’}{K} + \frac{\gamma’}{P} + \frac{\delta’}{C}) \alpha’ NHWCK \end{align}<br>$$<br>其中$P$表示每个Channel的<code>tile</code>数量，<br>$$<br>\begin{align}   \alpha’ &amp;= \frac{\alpha}{m^2} = \frac{(m+r-1)^2}{m^2} \\   \beta’  &amp;= \frac{\beta}{(m+r-1)^2} = \frac{\beta}{\alpha} \\   \gamma’ &amp;= \frac{\gamma}{(m+r-1)^2} = \frac{\gamma}{\alpha} \\   \delta’ &amp;= \frac{\delta}{(m+r-1)^2} = \frac{\delta}{\alpha} \\P&amp;=\frac{NHW}{m^2}  \end{align}<br>$$</p><blockquote><ul><li>$T(F)$只需要最初的时候做一次，通常也不考虑进卷积计算的复杂度</li><li>$T(D)$只对卷积输入做一次，其计算复杂度会被输出通道数量$K$平摊</li><li>$T(I)$只对卷积输出做一次，其计算复杂度会被输入通道数量$C$平摊</li><li>显然，随着$C、K$增大，$T(D)、T(I)$对整体运算复杂度的影响就会减小，Winograd带来的加速效果越明显；</li><li>同理，当$C、K$太小时，$T(D)、T(I)$对整体运算复杂度的影响会大于Winograd带来的加速效果，其计算效率反而不如直接卷积</li></ul></blockquote><p><code>tile</code>大小与各个参数的关系如下，其中，直接卷积可以看成<code>tile</code>大小为3：</p><p><img src="fig_tile_arithmetic_complecity_1.png" alt></p><h4 id="内存占用与加速比"><a href="#内存占用与加速比" class="headerlink" title="内存占用与加速比"></a>内存占用与加速比</h4><p>$F(I_{2\cdot 2},K_{3 \cdot 3})$的加速比上限是2.25，$F(I_{4\cdot 4},K_{3 \cdot 3})$的加速比上限是4，$F(I_{6\cdot 6},K_{3 \cdot 3})$的加速比上限是5.06。</p><p>常见的Winograd实现与普通卷积的效果比较如下：</p><p><img src="fig_tile_arithmetic_complecity_2.png" alt></p><p>ARM在Embedded Vision Summit 2018上的Slides中指出了一些常见模型上的加速情况，实现的流程和我们之前说的一致：</p><p><img src="fig_arm_impl_1.png" alt></p><p>不过ARM Compute Library的优化做的还不够好，所以真实情况下的加速比还有可能做的更高：</p><p><img src="fig_arm_result_2.png" alt></p><p><img src="fig_arm_result_1.png" alt></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="矩阵参数获取"><a href="#矩阵参数获取" class="headerlink" title="矩阵参数获取"></a>矩阵参数获取</h4><p>CVPR论文作者提供了一份生成矩阵参数的代码，可以参考<a href="https://github.com/andravin/wincnn/blob/master/wincnn.py" target="_blank" rel="noopener">这里</a>。</p><h4 id="端侧推理"><a href="#端侧推理" class="headerlink" title="端侧推理"></a>端侧推理</h4><p>以$F(I_{2\cdot 2},K_{3 \cdot 3})$为例，我们来看看代码是如何实现的，代码来自Tencent NCNN。通常针对特定的平台会使用硬件加速指令，此处的代码只是单纯的C++实现。可以看到一个很重要的优化手段就是for-loop展开，并且在真正计算的部分，中间结果我们尽量不使用二维数组，提高访问效率。另外，就像我们之前提到的，部分计算可以被重用。</p><ol><li>Filter Transform</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//3x3卷积，stride=1，F(2,3)</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">conv3x3s1_winograd23_transform_kernel</span><span class="token punctuation">(</span><span class="token keyword">const</span> Mat<span class="token operator">&amp;</span> kernel<span class="token punctuation">,</span> Mat<span class="token operator">&amp;</span> kernel_tm<span class="token punctuation">,</span> <span class="token keyword">int</span> inch<span class="token punctuation">,</span> <span class="token keyword">int</span> outch<span class="token punctuation">)</span><span class="token punctuation">{</span>    kernel_tm<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> inch<span class="token punctuation">,</span> outch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// G</span>    <span class="token keyword">const</span> <span class="token keyword">float</span> ktm<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span>   <span class="token number">1.0f</span><span class="token punctuation">,</span>     <span class="token number">0.0f</span><span class="token punctuation">,</span>     <span class="token number">0.0f</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">1.0f</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>   <span class="token number">0.0f</span><span class="token punctuation">,</span>     <span class="token number">0.0f</span><span class="token punctuation">,</span>     <span class="token number">1.0f</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">pragma</span> omp parallel for</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">&lt;</span>outch<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> q<span class="token operator">&lt;</span>inch<span class="token punctuation">;</span> q<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> kernel0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span>kernel <span class="token operator">+</span> p<span class="token operator">*</span>inch <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> q <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//每一行都有一个U</span>            <span class="token keyword">float</span><span class="token operator">*</span> kernel_tm0 <span class="token operator">=</span> kernel_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// transform kernel</span>            <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k0 <span class="token operator">=</span> kernel0<span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k1 <span class="token operator">=</span> kernel0 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k2 <span class="token operator">=</span> kernel0 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// h</span>            <span class="token keyword">float</span> tmp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// tmp = (G*g)T</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> k0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> k0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> k1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> k1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> k2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> k2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// U</span>            <span class="token comment" spellcheck="true">// kernel_tm0 = G*g*GT = U</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">float</span><span class="token operator">*</span> tmpp <span class="token operator">=</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    kernel_tm0<span class="token punctuation">[</span>j<span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> tmpp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> tmpp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> tmpp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> ktm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Input transform</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">conv3x3s1_winograd23</span><span class="token punctuation">(</span><span class="token keyword">const</span> Mat<span class="token operator">&amp;</span> bottom_blob<span class="token punctuation">,</span> Mat<span class="token operator">&amp;</span> top_blob<span class="token punctuation">,</span> <span class="token keyword">const</span> Mat<span class="token operator">&amp;</span> kernel_tm<span class="token punctuation">,</span> <span class="token keyword">const</span> Mat<span class="token operator">&amp;</span> _bias<span class="token punctuation">,</span> <span class="token keyword">const</span> Option<span class="token operator">&amp;</span> opt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> bottom_blob<span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> bottom_blob<span class="token punctuation">.</span>h<span class="token punctuation">;</span>    <span class="token keyword">int</span> inch <span class="token operator">=</span> bottom_blob<span class="token punctuation">.</span>c<span class="token punctuation">;</span>    <span class="token keyword">int</span> outw <span class="token operator">=</span> top_blob<span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token keyword">int</span> outh <span class="token operator">=</span> top_blob<span class="token punctuation">.</span>h<span class="token punctuation">;</span>    <span class="token keyword">int</span> outch <span class="token operator">=</span> top_blob<span class="token punctuation">.</span>c<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// pad to 2n+2, winograd F(2,3)</span>    Mat bottom_blob_bordered <span class="token operator">=</span> bottom_blob<span class="token punctuation">;</span>    outw <span class="token operator">=</span> <span class="token punctuation">(</span>outw <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    outh <span class="token operator">=</span> <span class="token punctuation">(</span>outh <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    w <span class="token operator">=</span> outw <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    h <span class="token operator">=</span> outh <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    Option opt_b <span class="token operator">=</span> opt<span class="token punctuation">;</span>    opt_b<span class="token punctuation">.</span>blob_allocator <span class="token operator">=</span> opt<span class="token punctuation">.</span>workspace_allocator<span class="token punctuation">;</span>    <span class="token function">copy_make_border</span><span class="token punctuation">(</span>bottom_blob<span class="token punctuation">,</span> bottom_blob_bordered<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> h <span class="token operator">-</span> bottom_blob<span class="token punctuation">.</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">-</span> bottom_blob<span class="token punctuation">.</span>w<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span>f<span class="token punctuation">,</span> opt_b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> bias <span class="token operator">=</span> _bias<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// BEGIN transform input</span>    Mat bottom_blob_tm<span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//total size 4x4->2x2</span>        <span class="token keyword">int</span> w_tm <span class="token operator">=</span> outw <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h_tm <span class="token operator">=</span> outh <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//tile number</span>        <span class="token keyword">int</span> nColBlocks <span class="token operator">=</span> h_tm<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// may be the block num in Feathercnn</span>        <span class="token keyword">int</span> nRowBlocks <span class="token operator">=</span> w_tm<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> tiles <span class="token operator">=</span> nColBlocks <span class="token operator">*</span> nRowBlocks<span class="token punctuation">;</span>        bottom_blob_tm<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> tiles<span class="token punctuation">,</span> inch<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>workspace_allocator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// BT</span>        <span class="token comment" spellcheck="true">// const float itm[4][4] = {</span>        <span class="token comment" spellcheck="true">//     {1.0f,  0.0f, -1.0f,  0.0f},</span>        <span class="token comment" spellcheck="true">//     {0.0f,  1.0f,  1.00f, 0.0f},</span>        <span class="token comment" spellcheck="true">//     {0.0f, -1.0f,  1.00f, 0.0f},</span>        <span class="token comment" spellcheck="true">//     {0.0f, -1.0f,  0.00f, 1.0f}</span>        <span class="token comment" spellcheck="true">// };</span><span class="token macro property">#<span class="token directive keyword">pragma</span> omp parallel for num_threads(opt.num_threads)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> q<span class="token operator">&lt;</span>inch<span class="token punctuation">;</span> q<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> img <span class="token operator">=</span> bottom_blob_bordered<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span><span class="token operator">*</span> out_tm0 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nColBlocks<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r0 <span class="token operator">=</span> img <span class="token operator">+</span> w <span class="token operator">*</span> j <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r1 <span class="token operator">=</span> r0 <span class="token operator">+</span> w<span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r2 <span class="token operator">=</span> r1 <span class="token operator">+</span> w<span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r3 <span class="token operator">=</span> r2 <span class="token operator">+</span> w<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nRowBlocks<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">float</span> d0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">float</span> w0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">float</span> t0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// load</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        d0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> r1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        d2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> r2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        d3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> r3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// w = B_t * d</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        w0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> d0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> d2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        w1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> d2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        w2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> d2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        w3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> d3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// transpose d to d_t</span>                    <span class="token punctuation">{</span>                        t0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>w0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>w0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>w0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>w0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        t0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>w1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>w1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>w1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>w1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        t0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>w2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>w2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>w2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>w2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        t0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>w3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>w3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>w3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> t3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>w3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// d = B_t * d_t</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        d0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> t0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> t2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> t1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> t2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        d2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> t2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> t1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        d3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> t3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> t1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// save to out_tm</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        out_tm0<span class="token punctuation">[</span>n   <span class="token punctuation">]</span> <span class="token operator">=</span> d0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        out_tm0<span class="token punctuation">[</span>n<span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        out_tm0<span class="token punctuation">[</span>n<span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> d2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        out_tm0<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> d3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    r0 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    r1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    r2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    r3 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    out_tm0 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>Hadamard product</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">    bottom_blob_bordered <span class="token operator">=</span> <span class="token function">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// BEGIN dot</span>    Mat top_blob_tm<span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> w_tm <span class="token operator">=</span> outw <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h_tm <span class="token operator">=</span> outh <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nColBlocks <span class="token operator">=</span> h_tm<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// may be the block num in Feathercnn</span>        <span class="token keyword">int</span> nRowBlocks <span class="token operator">=</span> w_tm<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> tiles <span class="token operator">=</span> nColBlocks <span class="token operator">*</span> nRowBlocks<span class="token punctuation">;</span>        top_blob_tm<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> tiles<span class="token punctuation">,</span> outch<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>workspace_allocator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nn_outch <span class="token operator">=</span> outch <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> remain_outch_start <span class="token operator">=</span> nn_outch <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">pragma</span> omp parallel for num_threads(opt.num_threads)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> pp<span class="token operator">&lt;</span>nn_outch<span class="token punctuation">;</span> pp<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> p <span class="token operator">=</span> pp <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>            Mat out0_tm <span class="token operator">=</span> top_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            Mat out1_tm <span class="token operator">=</span> top_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Mat out2_tm <span class="token operator">=</span> top_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Mat out3_tm <span class="token operator">=</span> top_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> Mat kernel0_tm <span class="token operator">=</span> kernel_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> Mat kernel1_tm <span class="token operator">=</span> kernel_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> Mat kernel2_tm <span class="token operator">=</span> kernel_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> Mat kernel3_tm <span class="token operator">=</span> kernel_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>tiles<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">float</span><span class="token operator">*</span> output0_tm <span class="token operator">=</span> out0_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span><span class="token operator">*</span> output1_tm <span class="token operator">=</span> out1_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span><span class="token operator">*</span> output2_tm <span class="token operator">=</span> out2_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span><span class="token operator">*</span> output3_tm <span class="token operator">=</span> out3_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> sum0<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.0f</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> sum1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.0f</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> sum2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.0f</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> sum3<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.0f</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> q<span class="token operator">+</span><span class="token number">3</span><span class="token operator">&lt;</span>inch<span class="token punctuation">;</span> q<span class="token operator">+</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r0 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r1 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r2 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r3 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k0 <span class="token operator">=</span> kernel0_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k1 <span class="token operator">=</span> kernel1_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k2 <span class="token operator">=</span> kernel2_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k3 <span class="token operator">=</span> kernel3_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k0 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k0 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k0 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k0 <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>                        sum1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k1 <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>                        sum2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k2 <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>                        sum3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k3 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k3 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k3 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                        sum3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k3 <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> q<span class="token operator">&lt;</span>inch<span class="token punctuation">;</span> q<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r0 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k0 <span class="token operator">=</span> kernel0_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k1 <span class="token operator">=</span> kernel1_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k2 <span class="token operator">=</span> kernel2_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k3 <span class="token operator">=</span> kernel3_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        sum1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        sum2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        sum3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    output0_tm<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    output1_tm<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> sum1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    output2_tm<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> sum2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    output3_tm<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> sum3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">pragma</span> omp parallel for num_threads(opt.num_threads)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span>remain_outch_start<span class="token punctuation">;</span> p<span class="token operator">&lt;</span>outch<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Mat out0_tm <span class="token operator">=</span> top_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> Mat kernel0_tm <span class="token operator">=</span> kernel_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>tiles<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">float</span><span class="token operator">*</span> output0_tm <span class="token operator">=</span> out0_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span> sum0<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.0f</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> q<span class="token operator">+</span><span class="token number">3</span><span class="token operator">&lt;</span>inch<span class="token punctuation">;</span> q<span class="token operator">+</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r0 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r1 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r2 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r3 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k0 <span class="token operator">=</span> kernel0_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k1 <span class="token operator">=</span> kernel0_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k2 <span class="token operator">=</span> kernel0_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k3 <span class="token operator">=</span> kernel0_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> q<span class="token operator">&lt;</span>inch<span class="token punctuation">;</span> q<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> r0 <span class="token operator">=</span> bottom_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">*</span> k0 <span class="token operator">=</span> kernel0_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> r0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> k0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    output0_tm<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> sum0<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    bottom_blob_tm <span class="token operator">=</span> <span class="token function">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// END dot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>Output transform</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// BEGIN transform output</span>    Mat top_blob_bordered<span class="token punctuation">;</span>    top_blob_bordered<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>outw<span class="token punctuation">,</span> outh<span class="token punctuation">,</span> outch<span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>workspace_allocator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// AT</span>        <span class="token comment" spellcheck="true">// const float itm[2][4] = {</span>        <span class="token comment" spellcheck="true">//     {1.0f,  1.0f,  1.0f,  0.0f},</span>        <span class="token comment" spellcheck="true">//     {0.0f,  1.0f, -1.0f,  1.0f}</span>        <span class="token comment" spellcheck="true">// };</span>        <span class="token keyword">int</span> w_tm <span class="token operator">=</span> outw <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h_tm <span class="token operator">=</span> outh <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nColBlocks <span class="token operator">=</span> h_tm<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// may be the block num in Feathercnn</span>        <span class="token keyword">int</span> nRowBlocks <span class="token operator">=</span> w_tm<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">pragma</span> omp parallel for num_threads(opt.num_threads)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">&lt;</span>outch<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Mat out_tm <span class="token operator">=</span> top_blob_tm<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            Mat out <span class="token operator">=</span> top_blob_bordered<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token keyword">float</span> bias0 <span class="token operator">=</span> bias <span class="token operator">?</span> bias<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>nColBlocks<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">float</span><span class="token operator">*</span> outRow0 <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>j<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">float</span><span class="token operator">*</span> outRow1 <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>j<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nRowBlocks<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">float</span><span class="token operator">*</span> out_tile <span class="token operator">=</span> out_tm<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>j<span class="token operator">*</span>nRowBlocks <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">float</span> s0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">float</span> w0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">float</span> d0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">float</span> o0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>o1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// load</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        s0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> out_tile<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        s1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> out_tile<span class="token punctuation">[</span>n<span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        s2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> out_tile<span class="token punctuation">[</span>n<span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        s3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> out_tile<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// w = A_T * W</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        w0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> s0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> s1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> s2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        w1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> s2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> s3<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// transpose w to w_t</span>                    <span class="token punctuation">{</span>                        d0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> w0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> d0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> w1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        d1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> w0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> d1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> w1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        d2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> w0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> d2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> w1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        d3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> w0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> d3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> w1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// Y = A_T * w_t</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        o0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> d0<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> d2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> bias0<span class="token punctuation">;</span>                        o1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> d2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> d3<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> bias0<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// save to top blob tm</span>                    outRow0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> o0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    outRow0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> o0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    outRow1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    outRow1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    outRow0 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    outRow1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// END transform output</span>    <span class="token comment" spellcheck="true">// cut result pad</span>    <span class="token function">copy_cut_border</span><span class="token punctuation">(</span>top_blob_bordered<span class="token punctuation">,</span> top_blob<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> top_blob_bordered<span class="token punctuation">.</span>h <span class="token operator">-</span> top_blob<span class="token punctuation">.</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> top_blob_bordered<span class="token punctuation">.</span>w <span class="token operator">-</span> top_blob<span class="token punctuation">.</span>w<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$F(I_{4\cdot 4},K_{3 \cdot 3})$的实现就更加复杂，可以看参考资料中Tencent NCNN的实现。</p><h2 id="跑题：-NHWC、HCHW和NC-4HW4-TODO"><a href="#跑题：-NHWC、HCHW和NC-4HW4-TODO" class="headerlink" title="跑题： NHWC、HCHW和NC/4HW4 -TODO"></a>跑题： NHWC、HCHW和NC/4HW4 -TODO</h2><p>我们在说NHWC时，实际上是说数据在内存上的排布策略，以及探讨该策略带来的访存性能变化。</p><p>NHWC与HCHW的区别用一张图就可以说清楚，其中我们的N=1，C=3，H=1，W=6：</p><p><img src="fig_nchw.webp" alt></p><blockquote><p><strong>NHWC 的访存局部性更好</strong>（每三个输入像素即可得到一个输出像素），<strong>NCHW</strong> 则必须等所有通道输入准备好才能得到最终输出结果，<strong>需要占用较大的临时空间</strong>。</p><p>在 CNN 中常常见到 1x1 卷积（例如：<a href="http://mp.weixin.qq.com/s?__biz=MzI2MzYwNzUyNg==&mid=2247483973&idx=1&sn=b0b9aa4190f5ac9a34421beaa92eb932&chksm=eab807ccddcf8edaa798098c73b82ee35f4b22e159ddcd4ffb0d0cd6cae77a170a59a5c441e4&scene=21#wechat_redirect" target="_blank" rel="noopener">用于移动和嵌入式视觉应用的 MobileNets</a>），也是每个输入 channel 乘一个权值，然后将所有 channel 结果累加得到一个输出 channel。如果使用 NHWC 数据格式，可以将卷积计算简化为矩阵乘计算，即 <strong>1x1 卷积核实现了每个输入像素组到每个输出像素组的线性变换</strong>。</p><p>TensorFlow 为什么选择 NHWC 格式作为默认格式？因为早期开发都是基于 CPU，使用 NHWC 比 NCHW 稍快一些（不难理解，NHWC 局部性更好，cache 利用率高）。</p><p>NCHW 则是 Nvidia cuDNN 默认格式，使用 GPU 加速时用 NCHW 格式速度会更快（也有个别情况例外）。</p></blockquote><p>最早接触到NC/4HW4是因为阿里的端侧推理框架MNN，不得不说这个框架真是太复杂了，随便拿一个技术点就能扯上半天。</p><p>NC/4HW4 的布局是为了更好地利用 SIMD 加速。NC/4HW4第一个4表示把原Feature map的通道按4分组不够补0，然后每组内的4个Feature map按照RGBA交织排列。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Winograd算法存在一定的计算精度损失。不过CNN模型需要的计算精度实际上很低，例如有用fp16、int8实现CNN的方法，也有用更低bit数甚至binary计算实现的方法，它们都有不错的ImageNet分类精度。 </li><li><code>tile</code>越大，加速比越大，卷积核大小也类似，但所需的加法、transform和存储的代价，计算精度的损失都会迅速增大。 因此通常只会采用较小的<code>tile</code>和卷积核大小，最常见的实现为$F(I_{2\cdot 2},K_{3 \cdot 3})$，$F(I_{4\cdot 4},K_{3 \cdot 3})$，$F(I_{6\cdot 6},K_{3 \cdot 3})$。</li><li>Winograd算法可以用矩阵形式来表示，但是具体实现时，并不意味着要调用矩阵运算的接口，为了更快的计算速度，通常会直接将计算展开，故代码量较大，且对于不同的<code>tile</code>大小需要专门定制的代码（好在也就那么几种），通常卷积核的大小为$2\times 2$到$7\times 7$。在划分方式上，$F(I_{1\cdot 1},K_{r \cdot r})$和im2col没有本质区别。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/shine-lee/p/10906535.html" target="_blank" rel="noopener">卷积神经网络中的Winograd快速卷积算法</a></li><li><a href="https://hey-yahei.cn/2019/08/21/winograd_convolution/" target="_blank" rel="noopener">Winograd卷积原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/82482351" target="_blank" rel="noopener">源于《孙子算经》的Cudnn</a></li><li><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Lavin_Fast_Algorithms_for_CVPR_2016_paper.pdf" target="_blank" rel="noopener">Paper-CVPR 2016-Fast Algorithms for Convolutional Neural Networks</a></li><li><a href="https://books.google.com/books?id=wANiW8bGQpEC" target="_blank" rel="noopener">Book-Shmuel Winograd.1980 Arithmetic complexity of computations</a></li><li><a href="https://yq.aliyun.com/articles/707074" target="_blank" rel="noopener">开源背后 | 面对端侧推理引擎的挑战，阿里工程师如何应对</a></li><li><a href="https://github.com/Tencent/FeatherCNN/blob/booster/src/booster/arm/winograd_kernels.cpp" target="_blank" rel="noopener">Tencent FeatherCNN实现</a></li><li><a href="https://github.com/Tencent/ncnn/blob/master/src/layer/x86/convolution_3x3.h" target="_blank" rel="noopener">Tencent NCNN 3x3实现</a></li><li><a href="https://zhuanlan.zhihu.com/p/51569443" target="_blank" rel="noopener">深度学习轻量级推理及加速</a></li><li><a href="https://zhuanlan.zhihu.com/p/67117914" target="_blank" rel="noopener">【移动端DL框架】当前主流的移动端深度学习框架一览</a></li><li><a href="https://www.bilibili.com/video/av50718398" target="_blank" rel="noopener">Video-Fast Algorithms for Convolutional Neural Networks by Andrew Lavin and Scott Gray</a></li><li><a href="https://www.bilibili.com/video/av53072685" target="_blank" rel="noopener">Video-Even Faster CNNs Exploring the New Class of Winograd Algorithms</a></li><li><a href="https://www.slideshare.net/embeddedvision/even-faster-cnns-exploring-the-new-class-of-winograd-algorithms-a-presentation-from-arm?from_action=save" target="_blank" rel="noopener">PPT-算法解析</a></li><li><a href="https://arxiv.org/abs/1810.01973" target="_blank" rel="noopener">Paper-Sparse Winograd Convolutional neural networks on small-scale systolic arrays</a> </li><li><a href="https://github.com/andravin/wincnn" target="_blank" rel="noopener">Code-参数生成 andravin/wincnn</a></li><li><a href="http://people.ece.umn.edu/users/parhi/SLIDES/chap8.pdf" target="_blank" rel="noopener">PPT-Fast Convolution</a></li><li><a href="https://zhuanlan.zhihu.com/p/72149270" target="_blank" rel="noopener">NCNN winograd详解（一）</a></li><li><a href="https://blog.csdn.net/antkillerfarm/article/details/78769624" target="_blank" rel="noopener">深度学习（十一）——Winograd（1）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷积神经网络 </tag>
            
            <tag> Winograd </tag>
            
            <tag> 端侧推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Solutions</title>
      <link href="/2019/11/07/leetcode-solutions/"/>
      <url>/2019/11/07/leetcode-solutions/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="LeetCode-72-编辑距离"><a href="#LeetCode-72-编辑距离" class="headerlink" title="LeetCode-72-编辑距离"></a>LeetCode-72-编辑距离</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><ol><li><p>插入一个字符</p></li><li><p>删除一个字符</p></li><li><p>替换一个字符</p></li></ol><p>示例 1:</p><pre><code>输入: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;输出: 3解释: horse -&gt; rorse (将 &#39;h&#39; 替换为 &#39;r&#39;)rorse -&gt; rose (删除 &#39;r&#39;)rose -&gt; ros (删除 &#39;e&#39;)</code></pre><p>示例 2:</p><pre><code>输入: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;输出: 5解释: intention -&gt; inention (删除 &#39;t&#39;)inention -&gt; enention (将 &#39;i&#39; 替换为 &#39;e&#39;)enention -&gt; exention (将 &#39;n&#39; 替换为 &#39;x&#39;)exention -&gt; exection (将 &#39;n&#39; 替换为 &#39;c&#39;)exection -&gt; execution (插入 &#39;u&#39;)</code></pre><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/edit-distance" target="_blank" rel="noopener">https://leetcode-cn.com/problems/edit-distance</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>编辑距离（Minimum Edit Distance，MED）是用来衡量两个字符串相似度的常用方法， 求两个字符串的编辑距离也算是一个经典问题了。</p><p>我们的两个字符串$A$,$B$分别代表了当前的字符串和目标字符串，实际上，将$A$变成$B$和将$B$变成$A$所需要的步数是一样的（逆过程），因此所需要的最小步数才可以用距离这个概念来表示。</p><p>如果有一个字符串是空串，那么显然可以只用另一个字符串的长度来表示，即：<br>$$<br>Dis(A,B)=max(len(A),len(B)),  if(len(A)==0 || len(B)==0)<br>$$<br>此外，距离可以从上一步的最优结果推到而来，这就是编辑距离的动态规划解法，注意到我们的三种情况其实就对应了三种允许的操作。看起来删除和插入操作好像是对称的，其实并没有本质的区别，只是因为我们的目标字符串是$B$：</p><p>$$<br>Dis(A_i,B_j)=min(Dis(A_{i-1},B_j)+1,Dis(A_i,B_{j-1})+1,Dis(A_{i-1},B_{j-1})+(A_i==B_j))<br>$$</p><p>三个操作分别表示</p><ul><li><p>删除字符$A_i$，因为$Dis(A_{i-1},B_j)$已经满足成为字符串$B_{1:j}$的条件</p></li><li><p>插入字符$B_j$</p></li><li><p>相等不操作，不相等则将字符$A_i$替换为$B_j$</p></li></ul><p>实际上在最后一个字母相等的情况下，肯定是直接等于左上角的结果最小，不需要再额外判断了。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>String word1<span class="token punctuation">,</span> String word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len1<span class="token operator">=</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>len2<span class="token operator">=</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> word2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>dis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> dis<span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>优化空间：</strong>这里我们使用的只有两行结果，因此可以使用滚动数组进行优化，不过对这道题目的数据而言意义不大hhh：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>String word1<span class="token punctuation">,</span> String word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len1<span class="token operator">=</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>len2<span class="token operator">=</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> word2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        if(len1>len2){            String tmp=word2;            word2=word1;            word1=tmp;            len1=word1.length();            len2=word2.length();        }         */</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>dis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> curIndex<span class="token operator">=</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">,</span>lastIndex<span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>curIndex<span class="token punctuation">;</span>            dis<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    dis<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>lastIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> dis<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>lastIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>lastIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dis<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dis<span class="token punctuation">[</span>len1 <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><h3 id="LeetCode-739-每日温度"><a href="#LeetCode-739-每日温度" class="headerlink" title="LeetCode-739-每日温度"></a>LeetCode-739-每日温度</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.</p><p>For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].</p><p>Note: The length of temperatures will be in the range [1, 30000]. Each temperature will be an integer in the range [30, 100].</p><p>根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。</p><p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p><p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/daily-temperatures" target="_blank" rel="noopener">https://leetcode-cn.com/problems/daily-temperatures</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><p>题意即找到每个数右侧第一个大于该数的数字，除了暴力遍历以外，另一种做法是保留我们遇到的数字，直到找到答案了再移除，可以借助单调栈的结构，此处使用单调<strong>非</strong>递增栈，方便起见只保存下标。</p><ul><li>单调<strong>非</strong>递增栈（&lt;=）：从栈底到栈顶的数字越来越小，允许重复</li><li>单调递减栈(&lt;)：从栈底到栈顶的数字越来越小，<strong>不</strong>允许重复</li></ul><p>本题既可以顺序遍历也可以逆序遍历</p><ul><li>顺序遍历方案：保留遇到的数字，如果当前数字比栈顶元素（之前遇到的）大，那么当前数字就是之前那个数字的答案</li><li>逆序遍历方案：从右往左遍历，去除栈顶所有比当前元素小的元素，如果栈空，那说明没有比当前元素大的，否则栈顶元素就是当前元素的答案</li></ul><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//单调栈从右往左遍历</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>T<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>T<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> cur<span class="token operator">=</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>cur<span class="token punctuation">)</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//单调栈从左往右遍历</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>T<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> cur<span class="token operator">=</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> tp<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">-</span>tp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h4><p>另一种思路不是该题的标准解，但是想法很巧妙，速度又很快。</p><p>具体而言，由于我们得到的结果实际上就代表了比当前元素大的所在位置，因此可以直接进行跳转，不需要再一个个比较，有点类似于KMP中的跳转表。</p><p><img src="fig_739_method2.png" alt></p><h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//利用ret[j]的结果进行跳转</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>T<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>T<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从下一个元素开始，每次都试图调到比当前元素更大的元素</span>            <span class="token comment" spellcheck="true">//小的那些就不再比较了</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>T<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">+=</span>ret<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">-</span>i<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="LeetCode-31-下一个排列"><a href="#LeetCode-31-下一个排列" class="headerlink" title="LeetCode-31.下一个排列"></a>LeetCode-31.下一个排列</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>必须原地修改，<strong>只允许使用额外常数空间</strong>。</p><p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p><p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p><p>The replacement must be in-place and use only constant extra memory.</p><p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p><p>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/next-permutation" target="_blank" rel="noopener">https://leetcode-cn.com/problems/next-permutation</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li><p>题目的意思是找一个字典序刚好比当前序列大的排列，如果当前序列已经是降序的，那么直接倒转即可</p></li><li><p>原地算法表示程序使用的空间必须是常数，与输入的数据规模无关</p></li><li><p>在中间的某一个排列可以分为三段，A:从前往后递增，B:从后往前递增，C:A与B之间的数（可能不存在），如数列</p><p>[<strong>1,2,7</strong>,4,5,<strong><em>6,3</em></strong>],要找到字典序更大的，无论如何调整B都不可能，而B中势必存在比C中最后一个元素更大的数，那么我们只需要将这个数换成B中刚好比他大的，再做一些调整就可以了。当然C可能不存在，那么实际上C就是A的最后一个元素。</p><p>我们需要找到的是满足条件的排列中，字典序最小的，因此在做完交换后，所需要做的调整就是将最后一段（长度和B相等）变成字典序最小的情况，显然这一段依然是单调递减的（从后往前递增），因此只要将这一段倒转即可。</p><p>[<strong>1,2,7</strong>,4,5,<strong><em>6,3</em></strong>]–&gt;[<strong>1,2,7</strong>,4,6,<strong><em>5,3</em></strong>]–&gt;[<strong>1,2,7</strong>,4,6,<strong><em>3,5</em></strong>]</p></li><li><p>想法的表述可能比较啰嗦，具体而言，算法分为4步：</p><ul><li>从后往前找到第一个不再增加的数字$S_i$</li><li>找到这个数字后刚好比他大的数字$S_j$</li><li>交换$S_i$与$S_j$</li><li>将$S_j$之后的一段数（这里是说下标$i$对应的那个位置，现在右侧可能就只有$S_i$）倒转</li></ul></li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//一些特例</span><span class="token comment" spellcheck="true">//{1},{2,1}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token number">-2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对应于两个特例，需要判断i是否越界</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">></span>i<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新坑落成纪念</title>
      <link href="/2019/11/06/xin-keng-luo-cheng-ji-nian/"/>
      <url>/2019/11/06/xin-keng-luo-cheng-ji-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="20191106"><a href="#20191106" class="headerlink" title="20191106"></a>20191106</h2><p>很久没有写博客啦，之前学习的东西都没有系统的整理过，因此和小伙伴@Fx-Ren(<a href="mailto:awesome_rfx@163.com" target="_blank" rel="noopener">awesome_rfx@163.com</a>)一起开一个新坑，给自己一些压力，希望之后能更新的勤快一些。</p><p>博客配置参考了<a href="https://godweiyang.com/2018/04/13/hexo-blog" target="_blank" rel="noopener">这个</a>,主题是<strong><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery</a></strong>，感谢原作者。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
